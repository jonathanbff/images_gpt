#!/usr/bin/env python3
"""
agentes_criativos.py
Sistema de cria√ß√£o de an√∫ncios com m√∫ltiplos agentes especializados.

1) Agente Composer: Identifica a composi√ß√£o e entende elementos, cor, textura, texto.
2) Agente de Copy: Gera textos de alta convers√£o com base na composi√ß√£o.
3) Agente Designer: Gera imagens com instru√ß√µes de composi√ß√£o e textos.
4) Agente Double Checker: Verifica erros e insere logos.
5) Agente Editor: Permite edi√ß√µes nos designs criados.

Executar:
  streamlit run agentes_criativos.py
"""
import streamlit as st
import base64
import json
import os
import sys
from datetime import datetime
from pathlib import Path
from io import BytesIO
import tempfile
import time
import re
import copy
from PIL import Image
from dotenv import load_dotenv
import requests

# Carregar vari√°veis de ambiente do arquivo .env
load_dotenv()

# Importar cliente OpenAI
from openai import OpenAI

# Configura√ß√µes do aplicativo
st.set_page_config(
    page_title="Sistema de Cria√ß√£o de An√∫ncios",
    page_icon="üé®",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Constantes e configura√ß√µes
MODEL_VISION = "gpt-4o-mini"
MODEL_TEXT = "gpt-4o-mini"
MODEL_IMAGE = "gpt-image-1"

# Diret√≥rio para arquivos tempor√°rios
TEMP_DIR = Path(tempfile.gettempdir()) / "agentes_criativos"
TEMP_DIR.mkdir(exist_ok=True)

# Diret√≥rio para salvar as imagens geradas
OUTPUT_DIR = Path("outputs")
OUTPUT_DIR.mkdir(exist_ok=True)

# Carregar e inicializar cliente OpenAI
client = OpenAI()

# Inicializar estado da sess√£o
if "step" not in st.session_state:
    st.session_state.step = 1

if "uploaded_image" not in st.session_state:
    st.session_state.uploaded_image = None

if "composition_analysis" not in st.session_state:
    st.session_state.composition_analysis = None

if "copy_suggestions" not in st.session_state:
    st.session_state.copy_suggestions = None

if "approved_copy" not in st.session_state:
    st.session_state.approved_copy = None

if "generated_designs" not in st.session_state:
    st.session_state.generated_designs = []

if "selected_design" not in st.session_state:
    st.session_state.selected_design = None

if "final_design" not in st.session_state:
    st.session_state.final_design = None

if "logs" not in st.session_state:
    st.session_state.logs = []

# Utilit√°rios
def log(msg):
    """Adiciona uma mensagem ao log e imprime no console"""
    timestamp = datetime.now().strftime("%H:%M:%S")
    log_msg = f"[{timestamp}] {msg}"
    st.session_state.logs.append(log_msg)
    print(log_msg)

def image_to_base64(path):
    """Converte uma imagem para base64"""
    data = base64.b64encode(path.read_bytes()).decode()
    mime = "image/png" if path.suffix.lower() == ".png" else "image/jpeg"
    return f"data:{mime};base64,{data}"

def ensure_size(img_bytes, w, h):
    """Garante que a imagem tenha o tamanho especificado"""
    img = Image.open(BytesIO(img_bytes)).convert("RGBA")
    if img.size != (w, h):
        img = img.resize((w, h), Image.LANCZOS)
    buf = BytesIO()
    img.save(buf, "PNG")
    return buf.getvalue()

def save_temp_image(image_bytes, filename):
    """Salva uma imagem tempor√°ria no disco e retorna o caminho"""
    path = TEMP_DIR / filename
    path.write_bytes(image_bytes)
    return path

def save_output_image(image_bytes, filename):
    """Salva uma imagem na pasta de sa√≠da e retorna o caminho"""
    try:
        # Primeiro, verificar se os bytes s√£o uma imagem v√°lida
        img = Image.open(BytesIO(image_bytes))
        
        # Converter para RGB se necess√°rio
        if img.mode in ('RGBA', 'LA'):
            background = Image.new('RGB', img.size, (255, 255, 255))
            background.paste(img, mask=img.split()[-1])
            img = background
        
        # Salvar a imagem
        path = OUTPUT_DIR / filename
        img.save(path, format="PNG", quality=95)
        
        log(f"‚úì Imagem salva em: {path}")
        return path
    except Exception as e:
        log(f"‚ö†Ô∏è Erro ao salvar imagem: {str(e)}")
        return None

# Interface principal
st.title("üé® Sistema de Cria√ß√£o de An√∫ncios")

# Sidebar com logs e configura√ß√µes
with st.sidebar:
    st.header("Configura√ß√µes")
    
    # API Key (se n√£o estiver no .env)
    api_key_env = os.getenv("OPENAI_API_KEY", "")
    if not api_key_env:
        api_key = st.text_input("OpenAI API Key", type="password", 
                              help="Insira sua chave de API da OpenAI ou configure no arquivo .env")
        if api_key:
            st.session_state.api_key = api_key
            os.environ["OPENAI_API_KEY"] = api_key
    else:
        st.success("API Key carregada do arquivo .env")
    
    st.divider()
    
    # √Årea de logs
    st.subheader("üìã Logs")
    logs_text = "\n".join(st.session_state.logs)
    st.text_area("Detalhes do Processamento", value=logs_text, height=400)

# Implementa√ß√£o do Agente Composer
def agente_composer(img_path):
    """
    Agente Composer: Identifica a composi√ß√£o e entende elementos, cor, textura, texto.
    """
    log("Agente Composer: Analisando a composi√ß√£o da imagem")
    try:
        b64 = image_to_base64(img_path)
        
        prompt = """
        Analise esta imagem de forma EXTREMAMENTE DETALHADA e extraia:
        
        1. Dimens√µes exatas em pixels
        2. Elementos principais com descri√ß√µes precisas:
           - Textos: conte√∫do exato, fonte, peso, alinhamento, cor e hierarquia visual
           - Formas: tipo exato (ret√¢ngulo, c√≠rculo, etc.), cor, opacidade, borda
           - Imagens/√çcones: descri√ß√£o detalhada, fun√ß√£o comunicativa
           - Logotipos: descri√ß√£o completa, posicionamento
           - Bot√µes: formato, cantos, sombras, efeitos
        3. Cores:
           - C√≥digo hexadecimal exato de TODAS as cores
           - Rela√ß√µes entre cores (prim√°ria, secund√°ria, destaque)
           - Gradientes, transpar√™ncias ou efeitos especiais
        4. Layout e composi√ß√£o:
           - Alinhamentos exatos (superior, inferior, centro)
           - Margens e espa√ßamentos precisos
           - Grids ou estruturas percept√≠veis
           - Hierarquia visual e fluxo de leitura
        5. Estilos visuais:
           - Estilo tipogr√°fico (serifa, sans-serif, espessura)
           - Elementos decorativos
           - Texturiza√ß√£o ou tratamentos especiais
           - Estilo global (minimalista, corporativo, colorido, etc.)
        6. Texturas e efeitos de ilumina√ß√£o:
           - Tipos de texturas por elemento (gradiente, met√°lico, plano, m√°rmore, etc.)
           - Dire√ß√£o e intensidade das texturas
           - Efeitos de luz e sombra (especular, brilho suave, reflexo)
           - Tratamentos de superf√≠cie (fosco, brilhante, acetinado)
        
        MUITO IMPORTANTE: Sua resposta deve ser um objeto JSON v√°lido com a estrutura especificada abaixo. 
        N√£o inclua explica√ß√µes, coment√°rios ou texto adicional fora do objeto JSON.
        
        {
            "canvas_size": {"w": W, "h": H},
            "placeholders": [
                {
                    "id": "1", 
                    "type": "text", 
                    "value": "texto exato", 
                    "bbox": [x, y, w, h], 
                    "font": {
                        "color": "#HEX",
                        "size": N,
                        "family": "tipo da fonte",
                        "weight": "peso", 
                        "alignment": "alinhamento", 
                        "style": "estilo"
                    },
                    "layer": 1,
                    "description": "descri√ß√£o detalhada da fun√ß√£o deste texto",
                    "visual_hierarchy": "prim√°rio/secund√°rio/terci√°rio"
                },
                {
                    "id": "2", 
                    "type": "shape", 
                    "shape_type": "ret√¢ngulo/c√≠rculo/etc",
                    "value": "#HEX", 
                    "bbox": [x, y, w, h],
                    "opacity": 1.0,
                    "border": {"color": "#HEX", "width": N},
                    "corners": "arredondado/reto",
                    "shadow": true/false,
                    "layer": 0,
                    "description": "fun√ß√£o desta forma na composi√ß√£o",
                    "texture": {
                        "type": "flat/gradient/metallic/glossy/marble/etc",
                        "colors": ["#HEX1", "#HEX2"],
                        "direction": "diagonal/vertical/radial",
                        "intensity": "low/medium/high"
                    }
                }
            ],
            "color_palette": {
                "primary": "#HEX",
                "secondary": "#HEX",
                "accent": "#HEX",
                "text": "#HEX",
                "background": "#HEX",
                "all_colors": ["#HEX1", "#HEX2", "#HEX3", "#HEX4"]
            },
            "textures": {
                "background": {
                    "type": "flat/gradient/pattern",
                    "colors": ["#HEX1", "#HEX2"],
                    "direction": "top-to-bottom/radial/diagonal",
                    "intensity": "low/medium/high"
                },
                "primary_elements": {
                    "type": "glossy/metallic/matte/marble",
                    "colors": ["#HEX1", "#HEX2"],
                    "effect": "descri√ß√£o do efeito visual"
                },
                "buttons": {
                    "type": "flat/glossy/gradient",
                    "colors": ["#HEX1", "#HEX2"]
                }
            },
            "lighting": {
                "main": {
                    "type": "ambient/specular/soft-glow",
                    "position": "top-right/center/etc",
                    "intensity": "low/medium/high",
                    "effect": "descri√ß√£o do efeito visual"
                },
                "highlights": {
                    "targets": ["ID-1", "ID-2"],
                    "effect": "descri√ß√£o do efeito de destaque"
                }
            }
        }
        """
        
        # Primeira tentativa com temperatura 0 para m√°xima precis√£o
        res = client.chat.completions.create(
            model=MODEL_VISION,
            messages=[
                {"role": "system", "content": "Voc√™ √© um assistente especializado em an√°lise de design visual e composi√ß√£o de imagens."},
                {"role": "user", "content": [
                    {"type": "text", "text": prompt},
                    {"type": "image_url", "image_url": {"url": b64}}
                ]}
            ],
            temperature=0,
            response_format={"type": "json_object"}  # For√ßar formato JSON
        )
        
        content = res.choices[0].message.content
        
        try:
            # Tentar parsear diretamente como JSON
            result = json.loads(content)
            log("‚úì An√°lise da composi√ß√£o conclu√≠da com sucesso")
            return result
        except json.JSONDecodeError as e:
            log(f"‚ö†Ô∏è Erro ao decodificar JSON da an√°lise: {str(e)}")
            
            # Tentar extrair apenas a parte JSON da resposta
            json_start = content.find('{')
            json_end = content.rfind('}') + 1
            
            if json_start >= 0 and json_end > json_start:
                try:
                    json_content = content[json_start:json_end]
                    result = json.loads(json_content)
                    log("‚úì JSON de an√°lise extra√≠do com sucesso da resposta parcial")
                    return result
                except json.JSONDecodeError:
                    log("‚ö†Ô∏è Falha ao extrair JSON da an√°lise")
            
            # Se ainda falhar, retornar um template b√°sico
            log("‚ö†Ô∏è Usando template b√°sico de an√°lise")
            img = Image.open(img_path)
            w, h = img.size
            return {
                "canvas_size": {"w": w, "h": h},
                "placeholders": [],
                "color_palette": {
                    "primary": "#800080",
                    "secondary": "#FFFFFF",
                    "accent": "#FFA500",
                    "text": "#000000",
                    "background": "#FFFFFF",
                    "all_colors": ["#800080", "#FFFFFF", "#FFA500", "#000000"]
                }
            }
    except Exception as e:
        log(f"‚ö†Ô∏è Erro no Agente Composer: {str(e)}")
        img = Image.open(img_path)
        w, h = img.size
        return {
            "canvas_size": {"w": w, "h": h},
            "placeholders": [],
            "color_palette": {
                "primary": "#800080",
                "secondary": "#FFFFFF",
                "accent": "#FFA500",
                "text": "#000000",
                "background": "#FFFFFF",
                "all_colors": ["#800080", "#FFFFFF", "#FFA500", "#000000"]
            }
        }

# Implementa√ß√£o do Agente de Copy
def agente_copy(composition_analysis):
    """
    Agente de Copy: Gera textos de alta convers√£o com base na composi√ß√£o analisada.
    """
    log("Agente de Copy: Gerando textos de alta convers√£o")
    
    try:
        # Extrair elementos de texto da an√°lise
        text_elements = []
        for p in composition_analysis.get("placeholders", []):
            if p.get("type") == "text" and "value" in p:
                text_elements.append({
                    "id": p.get("id", ""),
                    "text": p.get("value", ""),
                    "description": p.get("description", ""),
                    "visual_hierarchy": p.get("visual_hierarchy", "")
                })
        
        # Se n√£o houver elementos de texto, retornar mensagem de erro
        if not text_elements:
            log("‚ö†Ô∏è Nenhum elemento de texto encontrado na an√°lise")
            return {
                "error": "Nenhum elemento de texto encontrado na an√°lise",
                "suggestions": []
            }
        
        prompt = f"""
        Como especialista em copywriting para marketing digital, gere textos de alta convers√£o 
        para substituir os textos originais neste layout, mantendo a fun√ß√£o comunicativa 
        e hierarquia visual de cada elemento.
        
        ELEMENTOS DE TEXTO ORIGINAIS:
        {json.dumps(text_elements, indent=2, ensure_ascii=False)}
        
        INSTRU√á√ïES:
        1. Analise a fun√ß√£o comunicativa de cada elemento de texto
        2. Mantenha o mesmo comprimento aproximado (n√∫mero de caracteres/palavras)
        3. Preserve a hierarquia visual (textos prim√°rios, secund√°rios, etc.)
        4. Crie textos otimizados para alta convers√£o em marketing digital
        5. Adapte o tom e estilo para marketing persuasivo e a√ß√£o imediata
        6. Foque em benef√≠cios claros, urg√™ncia e chamadas para a√ß√£o direta
        
        Para cada elemento, gere 3 varia√ß√µes alternativas que:
        - Aumentem o apelo emocional e desejo do produto/servi√ßo
        - Comuniquem valor e benef√≠cios de forma clara e impactante
        - Reduzam fric√ß√£o para a a√ß√£o desejada (compra, cadastro, etc.)
        - Mantenham a identidade e prop√≥sito do an√∫ncio original
        
        FORMATE SUA RESPOSTA COMO JSON:
        {{
          "suggestions": [
            {{
              "id": "ID_DO_ELEMENTO",
              "original": "texto original",
              "alternatives": [
                "primeira alternativa de alta convers√£o",
                "segunda alternativa de alta convers√£o",
                "terceira alternativa de alta convers√£o"
              ],
              "explanation": "breve explica√ß√£o da estrat√©gia de copywriting aplicada"
            }},
            ... mais elementos ...
          ]
        }}
        """
        
        res = client.chat.completions.create(
            model=MODEL_TEXT,
            messages=[
                {"role": "system", "content": "Voc√™ √© um especialista em copywriting para marketing digital com foco em alta convers√£o."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.7,
            response_format={"type": "json_object"}
        )
        
        content = res.choices[0].message.content
        
        try:
            # Tentar parsear diretamente como JSON
            result = json.loads(content)
            log("‚úì Sugest√µes de copy geradas com sucesso")
            return result
        except json.JSONDecodeError as e:
            log(f"‚ö†Ô∏è Erro ao decodificar JSON das sugest√µes de copy: {str(e)}")
            
            # Tentar extrair apenas a parte JSON
            json_start = content.find('{')
            json_end = content.rfind('}') + 1
            
            if json_start >= 0 and json_end > json_start:
                try:
                    json_content = content[json_start:json_end]
                    result = json.loads(json_content)
                    log("‚úì JSON de sugest√µes de copy extra√≠do com sucesso da resposta parcial")
                    return result
                except json.JSONDecodeError:
                    log("‚ö†Ô∏è Falha ao extrair JSON das sugest√µes de copy")
        
        # Se falhar, criar sugest√µes b√°sicas
        basic_suggestions = {"suggestions": []}
        for elem in text_elements:
            basic_suggestions["suggestions"].append({
                "id": elem["id"],
                "original": elem["text"],
                "alternatives": [
                    f"Vers√£o otimizada 1: {elem['text']}",
                    f"Vers√£o otimizada 2: {elem['text']}",
                    f"Vers√£o otimizada 3: {elem['text']}"
                ],
                "explanation": "Alternativas otimizadas para maior convers√£o"
            })
        
        log("‚ÑπÔ∏è Usando sugest√µes b√°sicas de copy")
        return basic_suggestions
    
    except Exception as e:
        log(f"‚ö†Ô∏è Erro no Agente de Copy: {str(e)}")
        return {
            "error": f"Erro ao gerar sugest√µes de copy: {str(e)}",
            "suggestions": []
        } 

# Implementa√ß√£o do Agente Compositor Detalhado
def agente_compositor_detalhado(composition_analysis, approved_copy, colors):
    """
    Agente compositor detalhado: Cria um prompt extremamente descritivo para o design
    baseado na an√°lise da composi√ß√£o e nos textos aprovados.
    """
    log("Agente Compositor Detalhado: Criando prompt estruturado e detalhado")
    
    try:
        # Fun√ß√£o para variar o matiz das cores
        def shift_hue(hex_color, degrees):
            """Desloca o matiz de uma cor em X graus no c√≠rculo crom√°tico"""
            hex_color = hex_color.lstrip('#')
            
            try:
                # Converter hexadecimal para RGB
                r = int(hex_color[0:2], 16) / 255.0
                g = int(hex_color[2:4], 16) / 255.0
                b = int(hex_color[4:6], 16) / 255.0
                
                # Converter RGB para HSL
                max_val = max(r, g, b)
                min_val = min(r, g, b)
                h, s, l = 0, 0, (max_val + min_val) / 2
                
                if max_val == min_val:
                    h, s = 0, 0  # acrom√°tico
                else:
                    d = max_val - min_val
                    s = d / (2 - max_val - min_val) if l > 0.5 else d / (max_val + min_val)
                    
                    if max_val == r:
                        h = (g - b) / d + (6 if g < b else 0)
                    elif max_val == g:
                        h = (b - r) / d + 2
                    else:
                        h = (r - g) / d + 4
                    
                    h /= 6
                
                # Ajustar matiz
                h = (h + degrees/360) % 1
                
                # Converter de volta para RGB
                def hue_to_rgb(p, q, t):
                    if t < 0: t += 1
                    if t > 1: t -= 1
                    if t < 1/6: return p + (q - p) * 6 * t
                    if t < 1/2: return q
                    if t < 2/3: return p + (q - p) * (2/3 - t) * 6
                    return p
                
                q = l * (1 + s) if l < 0.5 else l + s - l * s
                p = 2 * l - q
                
                r = hue_to_rgb(p, q, h + 1/3)
                g = hue_to_rgb(p, q, h)
                b = hue_to_rgb(p, q, h - 1/3)
                
                # Converter de volta para hexadecimal
                return f"#{int(r*255):02x}{int(g*255):02x}{int(b*255):02x}"
            except Exception:
                # Em caso de erro, retornar a cor original
                return f"#{hex_color}"
        
        # Extrair dimens√µes da imagem
        canvas_size = composition_analysis.get("canvas_size", {"w": 1024, "h": 1536})
        width, height = canvas_size.get("w", 1024), canvas_size.get("h", 1536)
        
        # Extrair elementos de texto aprovados
        text_replacements = {}
        for suggestion in approved_copy.get("suggestions", []):
            text_id = suggestion.get("id", "")
            selected_text = suggestion.get("selected", "")
            if text_id and selected_text:
                text_replacements[text_id] = selected_text
        
        # Aplicar textos aprovados aos elementos originais (preservando posi√ß√£o e estilo)
        text_elements = []
        shape_elements = []
        
        for p in composition_analysis.get("placeholders", []):
            if p.get("type") == "text":
                element = copy.deepcopy(p)
                if p.get("id") in text_replacements:
                    element["value"] = text_replacements[p.get("id")]
                text_elements.append(element)
            elif p.get("type") == "shape":
                shape_elements.append(copy.deepcopy(p))
        
        # Criar descri√ß√£o da paleta de cores com base na an√°lise original
        color_palette = composition_analysis.get("color_palette", {})
        all_colors = color_palette.get("all_colors", [colors["primary"], colors["secondary"], colors["accent"]])
        
        # Combina√ß√£o das cores originais com as cores variadas
        color_description = f"""
PALETA DE CORES (baseada na imagem original):
- Cor prim√°ria: {colors['primary']} (mantendo o esquema crom√°tico da an√°lise original)
- Cor secund√°ria: {colors['secondary']}
- Cor de destaque: {colors['accent']}
- Cores adicionais da imagem original: {', '.join(all_colors[:5])}
- Cor de texto principal: {color_palette.get('text', '#1F1F1F')}
- Cor de fundo principal: {color_palette.get('background', colors['secondary'])}
"""
        
        # Detalhes de texturas da imagem original
        textures = composition_analysis.get("textures", {})
        if textures:
            color_description += "\nTEXTURAS (baseadas na imagem original):\n"
            for texture_name, texture_info in textures.items():
                texture_type = texture_info.get("type", "flat")
                texture_colors = texture_info.get("colors", [])
                texture_direction = texture_info.get("direction", "none")
                
                color_description += f"- {texture_name}: tipo {texture_type}"
                if texture_colors:
                    color_description += f", cores {', '.join(texture_colors[:3])}"
                if texture_direction != "none":
                    color_description += f", dire√ß√£o {texture_direction}"
                color_description += "\n"
        
        # Criar descri√ß√£o de layout fiel √† imagem original
        layout_description = "LAYOUT E ESTRUTURA (reproduzindo a imagem original):\n"
        
        # Mapeamento de regi√µes ocupadas para determinar o layout
        regions = {
            "top": [], "middle": [], "bottom": [],
            "left": [], "center": [], "right": []
        }
        
        # Analisar todos os elementos para determinar a distribui√ß√£o no layout
        all_elements = text_elements + shape_elements
        for elem in all_elements:
            bbox = elem.get("bbox", [0, 0, 0, 0])
            elem_center_x = bbox[0] + bbox[2]/2
            elem_center_y = bbox[1] + bbox[3]/2
            
            # Classificar verticalmente
            if elem_center_y < height * 0.33:
                regions["top"].append(elem)
            elif elem_center_y < height * 0.66:
                regions["middle"].append(elem)
            else:
                regions["bottom"].append(elem)
                
            # Classificar horizontalmente
            if elem_center_x < width * 0.33:
                regions["left"].append(elem)
            elif elem_center_x < width * 0.66:
                regions["center"].append(elem)
            else:
                regions["right"].append(elem)
        
        # Descrever a distribui√ß√£o dos elementos
        layout_description += "- Distribui√ß√£o de elementos mantida fiel √† imagem original:\n"
        
        for region_name, elems in regions.items():
            if elems:
                element_types = []
                for e in elems:
                    if e.get("type") == "text":
                        element_types.append(f"texto '{e.get('value', '')}'" if len(e.get('value', '')) < 30 else f"texto '{e.get('value', '')[:30]}...'")
                    else:
                        element_types.append(f"{e.get('shape_type', 'forma')} {e.get('value', '')}")
                
                layout_description += f"  * Regi√£o {region_name}: {len(elems)} elementos ({', '.join(element_types[:3])})\n"
        
        # Analisar fundos e estruturas principais
        background_info = composition_analysis.get("textures", {}).get("background", {})
        background_type = background_info.get("type", "flat")
        
        if background_type == "gradient" or background_type == "radial-gradient":
            layout_description += f"""
- Fundo com {background_type}:
  * Cores: {', '.join(background_info.get('colors', [colors['primary'], shift_hue(colors['primary'], -30)]))}
  * Dire√ß√£o: {background_info.get('direction', 'top-to-bottom')}
"""
        elif background_type == "pattern":
            layout_description += f"""
- Fundo com padr√£o do tipo {background_info.get('type', 'geom√©trico')}:
  * Cores: {', '.join(background_info.get('colors', [colors['primary'], colors['secondary']]))}
"""
        else:
            # Identificar se existem formas grandes que funcionam como se√ß√µes
            large_shapes = [s for s in shape_elements if (s.get("bbox", [0,0,0,0])[2] > width*0.5 and s.get("bbox", [0,0,0,0])[3] > height*0.2)]
            
            if large_shapes:
                layout_description += "- Estrutura com se√ß√µes de cores distintas:\n"
                for i, shape in enumerate(large_shapes):
                    bbox = shape.get("bbox", [0, 0, 0, 0])
                    position_y = (bbox[1] + bbox[3]/2) / height
                    position_str = "superior" if position_y < 0.33 else "central" if position_y < 0.66 else "inferior"
                    shape_color = shape.get("value", colors["primary"])
                    
                    layout_description += f"  * Se√ß√£o {position_str}: forma {shape.get('shape_type', 'ret√¢ngulo')} na cor {shape_color}\n"
            else:
                layout_description += f"""
- Fundo principal na cor {color_palette.get('background', colors['secondary'])}
- Elementos distribu√≠dos de acordo com a hierarquia visual original
"""
        
        # Descri√ß√£o detalhada de cada elemento de texto preservando posi√ß√µes originais
        text_description = "ELEMENTOS DE TEXTO (mantendo posi√ß√µes exatas da imagem original):\n"
        
        for i, text in enumerate(text_elements):
            value = text.get("value", "")
            font = text.get("font", {})
            color = font.get("color", "#000000")
            size = font.get("size", 16)
            weight = font.get("weight", "regular")
            alignment = font.get("alignment", "center")
            visual_hierarchy = text.get("visual_hierarchy", "")
            bbox = text.get("bbox", [0, 0, 0, 0])
            
            # Determinar posicionamento exato
            x_pos = bbox[0]
            y_pos = bbox[1]
            width_percent = int((bbox[2] / width) * 100)
            x_center_percent = int(((bbox[0] + bbox[2]/2) / width) * 100)
            y_center_percent = int(((bbox[1] + bbox[3]/2) / height) * 100)
            
            # Descri√ß√£o de posicionamento preciso
            position_desc = f"posi√ß√£o exata a {x_center_percent}% da largura e {y_center_percent}% da altura"
            if x_center_percent < 33:
                position_desc += ", alinhado √† esquerda"
            elif x_center_percent > 66:
                position_desc += ", alinhado √† direita"
            else:
                position_desc += ", centralizado horizontalmente"
                
            # Determinar estilo de destaque baseado na an√°lise original
            highlight_style = f"tamanho {size}px, peso {weight}, alinhamento {alignment}"
            highlight_style += f", na cor {color}"
            
            if visual_hierarchy == "primary":
                highlight_style = f"destaque principal, {highlight_style}"
            elif visual_hierarchy == "secondary":
                highlight_style = f"destaque secund√°rio, {highlight_style}"
            
            # Adicionar descri√ß√£o do texto com posicionamento preciso
            text_description += f"""
- Texto "{value}":
  * {position_desc}
  * Estilo: {highlight_style}
  * Largura aproximada: {width_percent}% da largura total
  * Preservar exatamente essa hierarquia visual
"""
        
        # Descri√ß√£o de elementos visuais originais (formas, bot√µes, etc.)
        visual_elements = "ELEMENTOS VISUAIS (da imagem original):\n"
        
        # Identificar e descrever elementos com fun√ß√µes espec√≠ficas
        buttons = []
        containers = []
        decorative = []
        
        for shape in shape_elements:
            shape_type = shape.get("shape_type", "rectangle")
            value = shape.get("value", "")  # cor
            bbox = shape.get("bbox", [0, 0, 0, 0])
            width_percent = int((bbox[2] / width) * 100)
            height_percent = int((bbox[3] / height) * 100)
            x_center_percent = int(((bbox[0] + bbox[2]/2) / width) * 100)
            y_center_percent = int(((bbox[1] + bbox[3]/2) / height) * 100)
            
            # Posicionamento exato
            position_desc = f"posi√ß√£o a {x_center_percent}% da largura e {y_center_percent}% da altura"
            
            # Classificar o elemento pela fun√ß√£o aparente
            if height_percent < 15 and width_percent < 50 and width_percent > 15:
                buttons.append({
                    "shape": shape,
                    "position": position_desc,
                    "width": width_percent,
                    "height": height_percent
                })
            elif width_percent > 50 and height_percent > 20:
                containers.append({
                    "shape": shape,
                    "position": position_desc,
                    "width": width_percent,
                    "height": height_percent
                })
            else:
                decorative.append({
                    "shape": shape,
                    "position": position_desc,
                    "width": width_percent,
                    "height": height_percent
                })
        
        # Descrever bot√µes
        if buttons:
            visual_elements += "- Bot√µes (preservar exatamente como na imagem original):\n"
            for i, btn in enumerate(buttons):
                shape = btn["shape"]
                visual_elements += f"""
  * Bot√£o {i+1}: {shape.get('shape_type', 'ret√¢ngulo')} na cor {shape.get('value', '#CCCCCC')}
    - {btn['position']}
    - Tamanho: {btn['width']}% √ó {btn['height']}% da tela
    - Cantos: {shape.get('corners', 'arredondados')}
    - Opacidade: {shape.get('opacity', 1.0)}
    - {shape.get('texture', {}).get('type', 'flat')}
"""
        
        # Descrever containers
        if containers:
            visual_elements += "- Containers/Se√ß√µes principais:\n"
            for i, cont in enumerate(containers):
                shape = cont["shape"]
                visual_elements += f"""
  * Container {i+1}: {shape.get('shape_type', 'ret√¢ngulo')} na cor {shape.get('value', '#FFFFFF')}
    - {cont['position']}
    - Tamanho: {cont['width']}% √ó {cont['height']}% da tela
    - Cantos: {shape.get('corners', 'arredondados')}
    - Opacidade: {shape.get('opacity', 1.0)}
    - Conte√∫do posicionado conforme layout original
"""
        
        # Descrever elementos decorativos
        if decorative:
            visual_elements += "- Elementos decorativos/gr√°ficos:\n"
            for i, dec in enumerate(decorative):
                shape = dec["shape"]
                visual_elements += f"""
  * Elemento {i+1}: {shape.get('shape_type', 'forma')} na cor {shape.get('value', '#CCCCCC')}
    - {dec['position']}
    - Tamanho: {dec['width']}% √ó {dec['height']}% da tela
"""
        
        # Descrever efeitos especiais e ilumina√ß√£o da imagem original
        lighting = composition_analysis.get("lighting", {})
        effects_description = "EFEITOS VISUAIS E ACABAMENTO (da imagem original):\n"
        
        if lighting:
            main_light = lighting.get("main", {})
            effects_description += f"""
- Ilumina√ß√£o principal: tipo {main_light.get('type', 'ambient')}
  * Posi√ß√£o: {main_light.get('position', 'top-right')}
  * Intensidade: {main_light.get('intensity', 'medium')}
  * Efeito: {main_light.get('effect', 'adds depth to the composition')}

- Efeitos de destaque: {lighting.get('highlights', {}).get('effect', 'subtle glow on key elements')}
"""
        
        effects_description += """
- Aplique sombras suaves nos textos principais para garantir legibilidade perfeita
- Adicione profundidade com micro-sombras em elementos sobrepostos
- Inclua reflexos sutis em superf√≠cies (bot√µes, caixas) para apar√™ncia profissional
- Mantenha consist√™ncia nos estilos de fonte e espa√ßamentos
- Reserve espa√ßo limpo para inser√ß√£o posterior de logo na parte inferior
"""
        
        # Combinar todas as se√ß√µes em um prompt completo, mantendo fidelidade ao original
        prompt = f"""
Crie uma imagem no formato vertical, com dimens√µes exatas de {width}x{height} pixels, que reproduza fielmente o layout da imagem original analisada, seguindo estas especifica√ß√µes detalhadas:

PALETA DE CORES:
- Cor prim√°ria: {colors['primary']} (use para elementos principais, √°reas de destaque e textos importantes)
- Cor secund√°ria: {colors['secondary']} (use para fundos, √°reas neutras e elementos de suporte)
- Cor de destaque/acento: {colors['accent']} (use para bot√µes, √≠cones e elementos interativos)
- Cor de texto principal: {color_palette.get('text', '#1F1F1F')} (para textos de alta legibilidade)
- Cor de texto secund√°rio: #5A5A5A (para textos legais e menos importantes)

ESTRUTURA DO FUNDO:
{layout_description}

ELEMENTOS DE TEXTO (posicionados exatamente como na imagem original):
{text_description}

ELEMENTOS VISUAIS (reproduzindo fielmente os elementos da imagem original):
{visual_elements}

COMPONENTES ESPEC√çFICOS E DETALHES INTERNOS:
{len(card_elements) > 0 and f"""
CART√ÉO DE CR√âDITO/D√âBITO:
- Posicionado exatamente como na imagem original
- Textura de m√°rmore fluido, misturando tons de {colors['primary']}, {shift_hue(colors['primary'], 20)} e {shift_hue(colors['primary'], 40)}
- Detalhes realistas: chip dourado ou prateado com circuitos vis√≠veis, s√≠mbolo de contactless com ondas
- N√∫meros impressos em alto relevo com fonte espec√≠fica para cart√µes (divididos em grupos de 4, formato: 5678 **** **** 1234)
- Data de validade no formato MM/AA na posi√ß√£o correta abaixo do n√∫mero principal
- Logo da bandeira (Visa/Mastercard/Elo/American Express) no canto inferior direito
- Nome do cliente em fonte espec√≠fica (n√£o preencher com texto real, usar "NOME DO CLIENTE")
- Brilho especular vindo do topo direito criando reflexos na superf√≠cie
- Rota√ß√£o suave para visual din√¢mico (manter √¢ngulo exatamente como na imagem original)
- Sombra realista abaixo do cart√£o com desfoque suave para sensa√ß√£o de profundidade
- Borda fina mais clara ao redor de todo o cart√£o para efeito de separa√ß√£o com o fundo
""" or ""}

{len(button_elements) > 0 and f"""
BOT√ïES:
- Bot√µes com cantos perfeitamente arredondados (raio de 8-12px)
- Bot√£o principal (CTA) na cor {colors['accent']} com texto em branco ou {colors['secondary']}
- Estilo 3D sutilmente elevado com pequeno gradiente vertical (mais claro no topo)
- Bot√µes secund√°rios em {shift_hue(colors['primary'], 30)} ou em cinza claro (#E0E0E0)
- Efeito de press√£o com sombra interna nos bot√µes selecionados
- Textura glossy sutil nos bot√µes com reflexo horizontal na parte superior
- Borda fina mais clara (1px) no topo e esquerda, e mais escura na direita e base
- Sombra externa muito suave (2-3px de desfoque, opacidade 20%)
- Texto centralizado com padding horizontal adequado (pelo menos 20px de cada lado)
- √çcone opcional alinhado ao texto (se existir na imagem original)
""" or ""}

{len(slider_elements) > 0 and f"""
SLIDER/CONTROLE DESLIZANTE:
- Trilho horizontal com textura met√°lica elegante em cinza gradiente (#CCCCCC at√© #999999)
- Altura exata do trilho como na imagem original (geralmente 4-6px)
- Bot√£o deslizante (thumb) circular ou oval na cor {colors['primary']} com tamanho exato como original
- √Årea preenchida do trilho (√† esquerda do thumb) com gradiente na cor {colors['primary']} at√© {shift_hue(colors['primary'], 20)}
- Leve sombra no bot√£o deslizante para sensa√ß√£o de eleva√ß√£o (1-2px offset, 3-4px blur)
- Efeito de brilho interno no thumb para apar√™ncia premium
- Marcadores de valor (ticks) abaixo do trilho, se presentes na imagem original
- Valores num√©ricos exatos nos extremos (m√≠nimo/m√°ximo) como na imagem original
- Posi√ß√£o do thumb mantida exatamente como na refer√™ncia
""" or ""}

{len(chart_elements) > 0 and f"""
GR√ÅFICOS FINANCEIROS:
- Reproduza exatamente o mesmo tipo de gr√°fico da imagem original (barras, linhas, pizza, etc.)
- Utilize as cores prim√°ria {colors['primary']} e de destaque {colors['accent']} para os dados principais
- Para gr√°ficos de linha: linha suave com gradiente abaixo dela, partindo da cor principal at√© transparente
- Para gr√°ficos de barra: barras com cantos arredondados e sutil gradiente vertical
- Para gr√°ficos de pizza: bordas refinadas entre segmentos e leve efeito 3D
- Legendas ou labels exatamente como na imagem original, com fonte leg√≠vel e n√≠tida
- Valores num√©ricos precisos conforme original, alinhados adequadamente
- Grid de fundo sutil quando presente na imagem original (linhas cinza claro #EEEEEE)
- Sombra muito suave sob todo o gr√°fico para destac√°-lo do fundo
- Manter todos os elementos de intera√ß√£o vis√≠veis na imagem original (tooltips, pontos de dados destacados)
""" or ""}

{len(icon_elements) > 0 and f"""
√çCONES:
- √çcones minimalistas e modernos na cor {colors['primary']} ou {colors['accent']}
- Estilo consistente entre todos os √≠cones (flat, outline, duotone ou solid)
- √çcones financeiros espec√≠ficos quando relevantes:
  * Cifr√£o/s√≠mbolo monet√°rio com design clean para representar dinheiro/pagamento
  * Carteira ou cart√£o para pagamentos e transa√ß√µes
  * Gr√°fico ascendente para investimentos ou crescimento
  * Escudo para seguran√ßa financeira
  * Rel√≥gio/calend√°rio para prazos e pagamentos
  * Porcentagem para taxas de juros
  * Casa para financiamento imobili√°rio
  * M√£os para empr√©stimos ou suporte
- Tamanho e posicionamento exatos como na imagem original
- Leve brilho ou sombra quando destacados no design original
""" or ""}

{len(container_elements) > 0 and f"""
CAIXAS/CONT√äINERES:
- Cont√™ineres com cantos arredondados precisos (raio de 12-16px, ou exatamente como original)
- Fundo em {colors['secondary']} com gradiente muito sutil para evitar apar√™ncia plana
- Borda refinada de 1-2px mais escura ou mais clara conforme design original
- Sombra externa suave para efeito flutuante (4-6px blur, 30% opacidade)
- Organiza√ß√£o interna do conte√∫do mantendo espa√ßamento e alinhamento da imagem original
- Linhas separadoras horizontais entre se√ß√µes quando presentes (cor #E0E0E0, 1px)
- Headers internos destacados com texto em negrito ou cor contrastante
- Parte superior possivelmente mais escura/destacada quando usado como cabe√ßalho
- Espa√ßamento interno (padding) consistente, geralmente 16-24px
- Elementos espec√≠ficos (√≠cones, bot√µes) posicionados precisamente como na refer√™ncia
""" or ""}

{"""
ELEMENTOS FINANCEIROS ESPEC√çFICOS:
- Simuladores de valor: caixas com valores monet√°rios destacados em fonte grande e negrito
  * Cifr√£o/s√≠mbolo monet√°rio alinhado corretamente (precedendo o valor ou sobrescrito)
  * Valores decimais em tamanho menor ou cor mais clara quando presentes
  * R√≥tulos explicativos posicionados acima ou ao lado dos valores

- Taxas de juros: valores percentuais destacados com s√≠mbolo "%" claro
  * Texto explicativo complementar como "ao m√™s" ou "ao ano" em tamanho menor
  * Cores contrastantes para diferenciar taxas promocionais ou condi√ß√µes especiais

- Prazos e parcelas: combina√ß√£o de n√∫meros e texto com hierarquia clara
  * N√∫mero de parcelas em destaque quando relevante (ex: "12x")
  * Valor da parcela com s√≠mbolo monet√°rio em formato padronizado
  * Prazo total do financiamento/empr√©stimo quando aplic√°vel

- Quadro de benef√≠cios: lista de vantagens com √≠cones associados
  * Marcadores visuais consistentes (check, bullet points, etc.)
  * Espa√ßamento igual entre itens da lista
  * √çcones alinhados verticalmente √† esquerda do texto

- Formul√°rios ou campos: √°reas para preenchimento com apar√™ncia interativa
  * Cantos arredondados e borda sutil
  * Labels posicionados consistentemente (acima ou dentro do campo)
  * Campos obrigat√≥rios com marca√ß√£o visual quando identific√°veis
  * Bot√£o de submiss√£o alinhado e destacado com a cor prim√°ria ou de destaque
"""}

EFEITOS E ACABAMENTO:
- Ilumina√ß√£o principal vinda da dire√ß√£o superior direita
- Aplique sombras suaves aos elementos principais para criar profundidade
- Textos principais devem ter sombras sutis para garantir legibilidade em qualquer fundo
- Bot√µes devem ter efeito de press√£o/clique com sombra interna suave
- Caixas e cont√™ineres devem ter sombra suave para simular eleva√ß√£o
- Elementos de destaque devem ter brilho sutil (glow) para atrair aten√ß√£o
- Mantenha consist√™ncia nos estilos de fonte em toda a composi√ß√£o
- Aplique texturas sutis em √°reas grandes para evitar apar√™ncia plana
- Reserve espa√ßo limpo na parte inferior para inser√ß√£o posterior de logo

INSTRU√á√ïES ESPEC√çFICAS DE COMPOSI√á√ÉO:
- Posicione todos os elementos EXATAMENTE nas mesmas posi√ß√µes relativas da imagem original
- Mantenha a hierarquia visual e o fluxo de leitura da imagem original
- Preserve os espa√ßamentos e margens entre elementos como na imagem analisada
- Mantenha propor√ß√µes exatas como especificado ({width}x{height} pixels)
- Garanta PERFEITA legibilidade de todos os textos com contraste adequado
- Se a imagem original tiver se√ß√µes distintas de cor, reproduza-as fielmente
- Os tamanhos e pesos das fontes devem seguir a hierarquia da imagem original
- Bot√µes e elementos interativos devem ser claramente identific√°veis
- Elementos decorativos devem complementar o layout sem disputar aten√ß√£o
- √Åreas de respiro (espa√ßo em branco) devem ser mantidas para equil√≠brio visual

IMPORTANTE: Este n√£o √© um layout gen√©rico. A composi√ß√£o final deve ser ID√äNTICA √† imagem original analisada, apenas com as cores e textos atualizados conforme especificado acima. Todos os elementos, suas posi√ß√µes, tamanhos relativos e hierarquia visual devem ser reproduzidos com m√°xima fidelidade.
"""
        
        log("‚úì Prompt detalhado baseado na imagem original criado com sucesso")
        return prompt
        
    except Exception as e:
        log(f"‚ö†Ô∏è Erro no Agente Compositor Detalhado: {str(e)}")
        
        # Retornar um prompt b√°sico em caso de erro
        return f"""
Crie uma imagem de an√∫ncio digital profissional que REPRODUZA o layout da imagem original analisada, com dimens√µes exatas de {width}x{height} pixels.

Use a seguinte paleta de cores:
- Cor prim√°ria: {colors['primary']}
- Cor secund√°ria: {colors['secondary']}
- Cor de destaque: {colors['accent']}

IMPORTANTE: Mantenha o mesmo layout e posicionamento de elementos da imagem original.
Garanta que todos os textos sejam perfeitamente leg√≠veis.
Reserve espa√ßo na parte inferior para inser√ß√£o posterior de logo.
"""

# Implementa√ß√£o do Agente Designer
def agente_designer(composition_analysis, approved_copy, num_variations=4):
    """
    Agente Designer: Gera imagens com as instru√ß√µes da composi√ß√£o e o texto aprovado.
    Gera no m√≠nimo 4 varia√ß√µes de criativos.
    """
    log(f"Agente Designer: Gerando {num_variations} varia√ß√µes de design baseadas na imagem original")
    
    try:
        # Verificar se temos uma an√°lise v√°lida da imagem original
        if not composition_analysis or not composition_analysis.get("placeholders"):
            log("‚ö†Ô∏è An√°lise da imagem original insuficiente ou inv√°lida")
            log("An√°lise detectada: " + str(composition_analysis)[:200] + "...")
        else:
            log(f"‚úì An√°lise v√°lida da imagem original detectada com {len(composition_analysis.get('placeholders', []))} elementos")
        
        # Extrair dimens√µes da imagem
        canvas_size = composition_analysis.get("canvas_size", {"w": 1024, "h": 1536})
        original_width, original_height = canvas_size.get("w", 1024), canvas_size.get("h", 1536)
        
        # Definir tamanho fixo para a API
        width, height = 1024, 1536
        
        log(f"Tamanho original: {original_width}x{original_height} (propor√ß√£o: {original_width/original_height:.2f})")
        log(f"Tamanho ajustado: {width}x{height} (propor√ß√£o: {width/height:.2f})")
        
        # Extrair paleta de cores
        colors = composition_analysis.get("color_palette", {})
        if not colors:
            colors = {
                "primary": "#800080",
                "secondary": "#FFFFFF",
                "accent": "#FFA500",
                "text": "#000000",
                "background": "#FFFFFF",
                "all_colors": ["#800080", "#FFFFFF", "#FFA500", "#000000"]
            }
        
        # Garantir os campos m√≠nimos para cada cor
        primary_color = colors.get("primary", "#800080")
        secondary_color = colors.get("secondary", "#FFFFFF")
        accent_color = colors.get("accent", "#FFA500")
        
        # Fun√ß√£o para gerar varia√ß√µes de cor
        def shift_hue(hex_color, degrees):
            """Desloca o matiz de uma cor em X graus no c√≠rculo crom√°tico"""
            hex_color = hex_color.lstrip('#')
            
            try:
                # Converter hexadecimal para RGB
                r = int(hex_color[0:2], 16) / 255.0
                g = int(hex_color[2:4], 16) / 255.0
                b = int(hex_color[4:6], 16) / 255.0
                
                # Converter RGB para HSL
                max_val = max(r, g, b)
                min_val = min(r, g, b)
                h, s, l = 0, 0, (max_val + min_val) / 2
                
                if max_val == min_val:
                    h, s = 0, 0  # acrom√°tico
                else:
                    d = max_val - min_val
                    s = d / (2 - max_val - min_val) if l > 0.5 else d / (max_val + min_val)
                    
                    if max_val == r:
                        h = (g - b) / d + (6 if g < b else 0)
                    elif max_val == g:
                        h = (b - r) / d + 2
                    else:
                        h = (r - g) / d + 4
                    
                    h /= 6
                
                # Ajustar matiz
                h = (h + degrees/360) % 1
                
                # Converter de volta para RGB
                def hue_to_rgb(p, q, t):
                    if t < 0: t += 1
                    if t > 1: t -= 1
                    if t < 1/6: return p + (q - p) * 6 * t
                    if t < 1/2: return q
                    if t < 2/3: return p + (q - p) * (2/3 - t) * 6
                    return p
                
                q = l * (1 + s) if l < 0.5 else l + s - l * s
                p = 2 * l - q
                
                r = hue_to_rgb(p, q, h + 1/3)
                g = hue_to_rgb(p, q, h)
                b = hue_to_rgb(p, q, h - 1/3)
                
                # Converter de volta para hexadecimal
                return f"#{int(r*255):02x}{int(g*255):02x}{int(b*255):02x}"
            except Exception:
                # Em caso de erro, retornar a cor original
                return f"#{hex_color}"
        
        # Gerar esquemas de cores variados para cada design
        color_variations = []
        for i in range(num_variations):
            if i == 0:  # Primeira varia√ß√£o - cores originais
                color_variations.append({
                    "primary": primary_color,
                    "secondary": secondary_color,
                    "accent": accent_color,
                    "scheme": "original"
                })
            elif i == 1:  # Segunda varia√ß√£o - cores an√°logas
                color_variations.append({
                    "primary": shift_hue(primary_color, 30),
                    "secondary": shift_hue(secondary_color, 15),
                    "accent": shift_hue(accent_color, -15),
                    "scheme": "an√°logo"
                })
            elif i == 2:  # Terceira varia√ß√£o - cores complementares
                color_variations.append({
                    "primary": shift_hue(primary_color, 180),
                    "secondary": secondary_color,
                    "accent": shift_hue(accent_color, -30),
                    "scheme": "complementar"
                })
            else:  # Varia√ß√µes adicionais
                color_variations.append({
                    "primary": shift_hue(primary_color, 60 * i),
                    "secondary": shift_hue(secondary_color, 30 * i),
                    "accent": shift_hue(accent_color, -45 * i),
                    "scheme": f"varia√ß√£o {i}"
                })
        
        # Gerar prompts para cada varia√ß√£o usando o agente compositor detalhado
        design_prompts = []
        generated_designs = []
        
        for i, colors in enumerate(color_variations):
            # Usar o agente compositor prompts avan√ßados para criar o prompt ultra-detalhado
            log(f"Gerando prompt ultra-detalhado para varia√ß√£o {i+1}, reproduzindo fielmente o layout original com novas cores")
            prompt = agente_compositor_prompts_avancados(composition_analysis, approved_copy, colors)
            
            # Refinar o prompt para garantir m√°xima fidelidade ao layout original
            refined_prompt = f"""
{prompt}

EXTREMAMENTE IMPORTANTE:
- Esta imagem DEVE reproduzir o LAYOUT EXATO da imagem original analisada
- Mantenha todos os elementos em suas POSI√á√ïES EXATAS como na imagem original
- N√£o invente novos elementos, use APENAS os que existem na an√°lise original
- Mantenha FIELMENTE as propor√ß√µes e tamanhos relativos de todos os elementos
- O resultado deve ser id√™ntico √† refer√™ncia original, apenas com as cores e textos atualizados
- N√ÉO modifique a estrutura, composi√ß√£o ou distribui√ß√£o dos elementos em rela√ß√£o √† imagem original
- Textos devem ocupar o mesmo espa√ßo e posi√ß√£o que na imagem original
"""
            
            design_prompts.append(refined_prompt)
        
        # Gerar designs para cada varia√ß√£o
        for i, prompt in enumerate(design_prompts):
            try:
                log(f"Gerando design varia√ß√£o {i+1} com esquema de cores {color_variations[i]['scheme']}")
                
                # Usar configura√ß√µes √≥timas para fidelidade e qualidade
                res = client.images.generate(
                    model="gpt-image-1",
                    prompt=prompt,
                    n=1,
                    size=f"{width}x{height}",
                    quality="high"        # Usar alta qualidade para m√°xima nitidez
                )
                
                if res.data and res.data[0].url:
                    try:
                        # A API retorna uma URL, precisamos baixar a imagem
                        log(f"Baixando imagem a partir da URL: {res.data[0].url}")
                        response = requests.get(res.data[0].url, timeout=30)
                        if response.status_code == 200:
                            image_bytes = response.content
                            
                            # Gerar nome de arquivo
                            timestamp = int(time.time())
                            filename = f"design_v{i+1}_{timestamp}.png"
                            
                            # Salvar a imagem
                            output_path = save_output_image(image_bytes, filename)
                            
                            if output_path:
                                # Adicionar ao resultado
                                generated_designs.append({
                                    "id": f"v{i+1}",
                                    "filename": filename,
                                    "path": str(output_path),
                                    "colors": color_variations[i],
                                    "bytes": image_bytes
                                })
                                
                                log(f"‚úì Design varia√ß√£o {i+1} gerado com sucesso")
                            else:
                                log(f"‚ö†Ô∏è Falha ao salvar design varia√ß√£o {i+1}")
                        else:
                            log(f"‚ö†Ô∏è Falha ao baixar imagem da URL. Status code: {response.status_code}")
                    except Exception as download_error:
                        log(f"‚ö†Ô∏è Erro ao baixar imagem da URL: {str(download_error)}")
                elif res.data and res.data[0].b64_json:
                    # Caso a API ainda retorne b64_json
                    image_base64 = res.data[0].b64_json
                    image_bytes = base64.b64decode(image_base64)
                    
                    # Gerar nome de arquivo
                    timestamp = int(time.time())
                    filename = f"design_v{i+1}_{timestamp}.png"
                    
                    # Salvar a imagem
                    output_path = save_output_image(image_bytes, filename)
                    
                    if output_path:
                        # Adicionar ao resultado
                        generated_designs.append({
                            "id": f"v{i+1}",
                            "filename": filename,
                            "path": str(output_path),
                            "colors": color_variations[i],
                            "bytes": image_bytes
                        })
                        
                        log(f"‚úì Design varia√ß√£o {i+1} gerado com sucesso")
                    else:
                        log(f"‚ö†Ô∏è Falha ao salvar design varia√ß√£o {i+1}")
                else:
                    log(f"‚ö†Ô∏è Falha ao gerar design varia√ß√£o {i+1}")
            
            except Exception as e:
                log(f"‚ö†Ô∏è Erro ao gerar design varia√ß√£o {i+1}: {str(e)}")
        
        # Verificar se temos pelo menos algumas varia√ß√µes
        if not generated_designs:
            log("‚ö†Ô∏è Nenhum design foi gerado com sucesso")
            return []
        
        log(f"‚úì Total de {len(generated_designs)} designs gerados com sucesso")
        return generated_designs
    
    except Exception as e:
        log(f"‚ö†Ô∏è Erro no Agente Designer: {str(e)}")
        return [] 

# Implementa√ß√£o do Agente Double Checker
def agente_double_checker(design_path, logo_path=None):
    """
    Agente Double Checker: Verifica se h√° algum erro de portugu√™s ou de sobreposi√ß√£o.
    Insere logo se fornecido. E finaliza o design.
    """
    log("Agente Double Checker: Verificando design e finalizando")
    
    try:
        # Carregar a imagem do design
        design_img = Image.open(design_path).convert("RGBA")
        
        # Se um logo foi fornecido, inserir no design
        if logo_path and Path(logo_path).exists():
            try:
                log("Inserindo logo no design")
                logo_img = Image.open(logo_path).convert("RGBA")
                
                # Redimensionar o logo para um tamanho proporcional
                logo_width = int(design_img.width * 0.2)  # 20% da largura do design
                logo_ratio = logo_img.width / logo_img.height
                logo_height = int(logo_width / logo_ratio)
                logo_img = logo_img.resize((logo_width, logo_height), Image.LANCZOS)
                
                # Posicionar o logo no canto inferior direito
                position = (design_img.width - logo_width - 20, design_img.height - logo_height - 20)
                
                # Criar uma nova imagem com o logo inserido
                img_with_logo = design_img.copy()
                img_with_logo.paste(logo_img, position, logo_img)
                
                # Salvar o resultado
                timestamp = int(time.time())
                filename = f"design_with_logo_{timestamp}.png"
                
                # Converter para bytes
                buffered = BytesIO()
                img_with_logo.save(buffered, format="PNG", quality=95)
                image_bytes = buffered.getvalue()
                
                # Salvar usando a fun√ß√£o save_output_image
                output_path = save_output_image(image_bytes, filename)
                
                if output_path:
                    log(f"‚úì Logo inserido com sucesso em: {output_path}")
                    design_path = output_path
                    design_img = img_with_logo
                else:
                    log("‚ö†Ô∏è Falha ao salvar imagem com logo")
            except Exception as e:
                log(f"‚ö†Ô∏è Erro ao inserir logo: {str(e)}")
        
        # Converter imagem para base64 para enviar para a API
        buffered = BytesIO()
        design_img.save(buffered, format="PNG", quality=95)
        img_base64 = base64.b64encode(buffered.getvalue()).decode()
        img_base64_url = f"data:image/png;base64,{img_base64}"
        
        # Verificar erros de portugu√™s e sobreposi√ß√£o
        prompt = """
        Analise cuidadosamente esta imagem de an√∫ncio digital e verifique:

        1. ERROS DE PORTUGU√äS:
           - Verifique todos os textos vis√≠veis quanto a erros ortogr√°ficos
           - Verifique concord√¢ncia verbal e nominal
           - Verifique uso correto de pontua√ß√£o
           - Identifique abrevia√ß√µes incorretas ou inconsistentes

        2. PROBLEMAS DE LEGIBILIDADE E SOBREPOSI√á√ÉO:
           - Verifique se h√° texto sobreposto a elementos visuais que dificultam a leitura
           - Verifique se h√° texto cortado ou parcialmente vis√≠vel
           - Verifique se h√° contraste insuficiente entre texto e fundo
           - Identifique problemas de espa√ßamento ou alinhamento que afetam a legibilidade

        FORMATE SUA RESPOSTA COMO JSON:
        {
          "has_errors": true/false,
          "errors": [
            {
              "type": "portugu√™s/sobreposi√ß√£o/legibilidade",
              "description": "descri√ß√£o detalhada do erro encontrado",
              "location": "onde no an√∫ncio o erro foi encontrado",
              "correction": "sugest√£o de corre√ß√£o"
            }
          ],
          "improvement_suggestions": [
            "sugest√£o 1 para melhorar o design",
            "sugest√£o 2 para melhorar o design"
          ],
          "final_assessment": "avalia√ß√£o geral da qualidade do an√∫ncio e sua efic√°cia potencial"
        }
        """
        
        res = client.chat.completions.create(
            model=MODEL_VISION,
            messages=[
                {"role": "system", "content": "Voc√™ √© um especialista em revis√£o de design e copywriting para marketing digital."},
                {"role": "user", "content": [
                    {"type": "text", "text": prompt},
                    {"type": "image_url", "image_url": {"url": img_base64_url}}
                ]}
            ],
            temperature=0.1,
            response_format={"type": "json_object"}
        )
        
        content = res.choices[0].message.content
        
        try:
            # Tentar parsear diretamente como JSON
            result = json.loads(content)
            log("‚úì Verifica√ß√£o conclu√≠da com sucesso")
            
            # Se houver erros, adicionar ao log
            if result.get("has_errors", False):
                log(f"‚ö†Ô∏è Encontrados {len(result.get('errors', []))} problemas no design")
                for error in result.get("errors", []):
                    log(f"  - {error.get('type', '')}: {error.get('description', '')}")
            else:
                log("‚úì Nenhum problema encontrado no design")
            
            # Adicionar informa√ß√µes ao resultado
            result["design_path"] = design_path
            
            return result
        
        except json.JSONDecodeError as e:
            log(f"‚ö†Ô∏è Erro ao decodificar JSON da verifica√ß√£o: {str(e)}")
            
            # Tentar extrair apenas a parte JSON
            json_start = content.find('{')
            json_end = content.rfind('}') + 1
            
            if json_start >= 0 and json_end > json_start:
                try:
                    json_content = content[json_start:json_end]
                    result = json.loads(json_content)
                    log("‚úì JSON de verifica√ß√£o extra√≠do com sucesso da resposta parcial")
                    result["design_path"] = design_path
                    return result
                except json.JSONDecodeError:
                    log("‚ö†Ô∏è Falha ao extrair JSON da verifica√ß√£o")
            
            # Se falhar, retornar resultado b√°sico
            return {
                "has_errors": False,
                "errors": [],
                "improvement_suggestions": [],
                "final_assessment": "Verifica√ß√£o autom√°tica n√£o dispon√≠vel",
                "design_path": design_path
            }
    
    except Exception as e:
        log(f"‚ö†Ô∏è Erro no Agente Double Checker: {str(e)}")
        return {
            "has_errors": False,
            "errors": [],
            "improvement_suggestions": [],
            "final_assessment": f"Erro durante a verifica√ß√£o: {str(e)}",
            "design_path": design_path
        } 

# Implementa√ß√£o do Agente Editor
def agente_editor(design_path, edits):
    """
    Agente Editor: Permite edi√ß√µes nos designs criados.
    """
    log("Agente Editor: Aplicando edi√ß√µes ao design")
    
    try:
        # Ler a imagem original
        design_img = Image.open(design_path).convert("RGBA")
        img_width, img_height = design_img.size
        
        # Criar um arquivo tempor√°rio para a imagem
        with tempfile.NamedTemporaryFile(suffix='.png', delete=False) as temp_file:
            # Salvar a imagem no arquivo tempor√°rio
            design_img.save(temp_file.name, format="PNG")
            temp_file.flush()
            
            # Construir o prompt com as instru√ß√µes de edi√ß√£o
            prompt = f"""
            Edite esta imagem de an√∫ncio com as seguintes altera√ß√µes:
            
            {edits}
            
            INSTRU√á√ïES IMPORTANTES:
            - Mantenha a mesma resolu√ß√£o e propor√ß√£o da imagem original ({img_width}x{img_height})
            - Preserve a estrutura geral do design e a hierarquia visual
            - Mantenha a identidade visual e estilo original
            - Aplique APENAS as altera√ß√µes especificadas acima
            - Garanta que o resultado final mant√©m a qualidade profissional do original
            """
            
            log("Enviando solicita√ß√£o de edi√ß√£o para a API")
            
            # Preparar a imagem para envio correto
            try:
                # Abrir o arquivo tempor√°rio em modo bin√°rio e ler seu conte√∫do
                with open(temp_file.name, 'rb') as image_file:
                    # Preparar a imagem com formato expl√≠cito para garantir compatibilidade MIME
                    image_data = image_file.read()
                    
                    # Verificar se precisamos converter a imagem
                    try:
                        # Tentar enviar diretamente para a API
                        res = client.images.edit(
                            model=MODEL_IMAGE,
                            image=open(temp_file.name, 'rb'),  # Reabrir o arquivo
                            prompt=prompt,
                            n=1,
                            size=f"{img_width}x{img_height}"
                        )
                    except Exception as img_error:
                        log(f"Erro no envio direto da imagem: {str(img_error)}. Tentando m√©todo alternativo...")
                        
                        # Se falhar, tentar m√©todo alternativo: salvar em outro formato
                        alt_img = Image.open(BytesIO(image_data))
                        
                        # Converter para RGB (remover transpar√™ncia) se necess√°rio
                        if alt_img.mode == 'RGBA':
                            background = Image.new('RGB', alt_img.size, (255, 255, 255))
                            background.paste(alt_img, mask=alt_img.split()[3])  # 3 √© o canal alfa
                            alt_img = background
                        
                        # Salvar em outro arquivo tempor√°rio em formato alternativo
                        with tempfile.NamedTemporaryFile(suffix='.jpeg', delete=False) as alt_temp:
                            alt_img.save(alt_temp.name, format="JPEG", quality=95)
                            alt_temp.flush()
                            
                            # Tentar novamente com o novo formato
                            res = client.images.edit(
                                model=MODEL_IMAGE,
                                image=open(alt_temp.name, 'rb'),
                                prompt=prompt,
                                n=1,
                                size=f"{img_width}x{img_height}"
                            )
                            
                            # Limpar arquivo tempor√°rio alternativo
                            os.unlink(alt_temp.name)
            except Exception as e:
                log(f"Todas as tentativas de edi√ß√£o falharam: {str(e)}")
                return {
                    "success": False,
                    "path": design_path,
                    "message": f"Falha ao editar imagem: {str(e)}"
                }
            
            # Remover o arquivo tempor√°rio original
            os.unlink(temp_file.name)
            
            if res.data and res.data[0].b64_json:
                # Decodificar a imagem
                image_base64 = res.data[0].b64_json
                image_bytes = base64.b64decode(image_base64)
                
                # Gerar nome de arquivo
                timestamp = int(time.time())
                filename = f"design_edited_{timestamp}.png"
                
                # Salvar a imagem
                output_path = save_output_image(image_bytes, filename)
                
                if output_path:
                    log(f"‚úì Design editado com sucesso: {output_path}")
                    return {
                        "success": True,
                        "path": str(output_path),
                        "message": "Edi√ß√µes aplicadas com sucesso"
                    }
                else:
                    log("‚ö†Ô∏è Falha ao salvar imagem editada")
                    return {
                        "success": False,
                        "path": design_path,
                        "message": "Falha ao salvar imagem editada"
                    }
            else:
                log("‚ö†Ô∏è Falha ao editar o design: resposta vazia da API")
                return {
                    "success": False,
                    "path": design_path,
                    "message": "Falha ao aplicar edi√ß√µes: resposta vazia da API"
                }
    
    except Exception as e:
        log(f"‚ö†Ô∏è Erro no Agente Editor: {str(e)}")
        return {
            "success": False,
            "path": design_path,
            "message": f"Erro ao aplicar edi√ß√µes: {str(e)}"
        }

# Implementa√ß√£o do Agente Compositor Prompts Avan√ßados
def agente_compositor_prompts_avancados(composition_analysis, approved_copy, colors):
    """
    Cria prompts extremamente detalhados e estruturados para gera√ß√£o de imagens
    usando t√©cnicas avan√ßadas de prompt engineering.
    """
    log("Agente Compositor Prompts Avan√ßados: Criando prompt ultra-detalhado")
    
    try:
        # Fun√ß√£o para gerar varia√ß√µes de cor
        def shift_hue(hex_color, degrees):
            """Desloca o matiz de uma cor em X graus no c√≠rculo crom√°tico"""
            hex_color = hex_color.lstrip('#')
            
            try:
                # Converter hexadecimal para RGB
                r = int(hex_color[0:2], 16) / 255.0
                g = int(hex_color[2:4], 16) / 255.0
                b = int(hex_color[4:6], 16) / 255.0
                
                # Converter RGB para HSL
                max_val = max(r, g, b)
                min_val = min(r, g, b)
                h, s, l = 0, 0, (max_val + min_val) / 2
                
                if max_val == min_val:
                    h, s = 0, 0  # acrom√°tico
                else:
                    d = max_val - min_val
                    s = d / (2 - max_val - min_val) if l > 0.5 else d / (max_val + min_val)
                    
                    if max_val == r:
                        h = (g - b) / d + (6 if g < b else 0)
                    elif max_val == g:
                        h = (b - r) / d + 2
                    else:
                        h = (r - g) / d + 4
                    
                    h /= 6
                
                # Ajustar matiz
                h = (h + degrees/360) % 1
                
                # Converter de volta para RGB
                def hue_to_rgb(p, q, t):
                    if t < 0: t += 1
                    if t > 1: t -= 1
                    if t < 1/6: return p + (q - p) * 6 * t
                    if t < 1/2: return q
                    if t < 2/3: return p + (q - p) * (2/3 - t) * 6
                    return p
                
                q = l * (1 + s) if l < 0.5 else l + s - l * s
                p = 2 * l - q
                
                r = hue_to_rgb(p, q, h + 1/3)
                g = hue_to_rgb(p, q, h)
                b = hue_to_rgb(p, q, h - 1/3)
                
                # Converter de volta para hexadecimal
                return f"#{int(r*255):02x}{int(g*255):02x}{int(b*255):02x}"
            except Exception:
                # Em caso de erro, retornar a cor original
                return f"#{hex_color}"
                
        # Extrair dimens√µes da imagem
        canvas_size = composition_analysis.get("canvas_size", {"w": 1024, "h": 1536})
        width, height = canvas_size.get("w", 1024), canvas_size.get("h", 1536)
        
        # Extrair elementos de texto aprovados
        text_replacements = {}
        for suggestion in approved_copy.get("suggestions", []):
            text_id = suggestion.get("id", "")
            selected_text = suggestion.get("selected", "")
            if text_id and selected_text:
                text_replacements[text_id] = selected_text
        
        # Aplicar textos aprovados aos elementos originais (preservando posi√ß√£o e estilo)
        text_elements = []
        shape_elements = []
        
        for p in composition_analysis.get("placeholders", []):
            if p.get("type") == "text":
                element = copy.deepcopy(p)
                if p.get("id") in text_replacements:
                    element["value"] = text_replacements[p.get("id")]
                text_elements.append(element)
            elif p.get("type") == "shape":
                shape_elements.append(copy.deepcopy(p))

        # An√°lise avan√ßada de elementos visuais e seus componentes internos
        # Identificar e categorizar elementos visuais espec√≠ficos
        card_elements = []
        button_elements = []
        container_elements = []
        slider_elements = []
        icon_elements = []
        illustration_elements = []
        chart_elements = []
        divider_elements = []
        
        # Fun√ß√£o para detectar o tipo mais prov√°vel de um elemento visual
        def detect_element_type(shape):
            shape_type = shape.get("shape_type", "rectangle").lower()
            description = shape.get("description", "").lower()
            bbox = shape.get("bbox", [0, 0, 0, 0])
            width_ratio = bbox[2] / width
            height_ratio = bbox[3] / height
            aspect_ratio = bbox[2] / bbox[3] if bbox[3] > 0 else 1
            
            # Palavras-chave para categoriza√ß√£o
            card_keywords = ["cart√£o", "card", "cr√©dito", "d√©bito", "visa", "mastercard", "payment"]
            button_keywords = ["bot√£o", "button", "cta", "call to action", "clique", "selecione"]
            slider_keywords = ["slider", "seletor", "controle deslizante", "barra de sele√ß√£o"]
            chart_keywords = ["gr√°fico", "chart", "diagrama", "plot"]
            icon_keywords = ["√≠cone", "icon", "s√≠mbolo", "pictograma"]
            
            # Detectar cart√µes
            if any(kw in description for kw in card_keywords) or (1.4 < aspect_ratio < 1.8 and 0.2 < width_ratio < 0.7):
                return "card"
            
            # Detectar bot√µes
            if any(kw in description for kw in button_keywords) or (shape_type == "rectangle" and "rounded" in shape.get("corners", "") and 0.1 < width_ratio < 0.5 and height_ratio < 0.1):
                return "button"
            
            # Detectar sliders
            if any(kw in description for kw in slider_keywords) or (shape_type == "rectangle" and width_ratio > 0.4 and height_ratio < 0.05):
                return "slider"
            
            # Detectar cont√™ineres/pain√©is
            if shape_type == "rectangle" and width_ratio > 0.5 and height_ratio > 0.1:
                return "container"
            
            # Detectar √≠cones
            if any(kw in description for kw in icon_keywords) or (width_ratio < 0.1 and height_ratio < 0.1 and aspect_ratio < 2):
                return "icon"
            
            # Detectar ilustra√ß√µes
            if "ilustra√ß√£o" in description or "illustration" in description or (width_ratio > 0.15 and aspect_ratio < 3):
                return "illustration"
            
            # Detectar gr√°ficos
            if any(kw in description for kw in chart_keywords):
                return "chart"
            
            # Detectar divisores
            if shape_type == "rectangle" and width_ratio > 0.3 and height_ratio < 0.01:
                return "divider"
            
            # Elemento gen√©rico
            return "generic"
        
        # Categorizar os elementos visuais
        for shape in shape_elements:
            element_type = detect_element_type(shape)
            
            if element_type == "card":
                card_elements.append(shape)
            elif element_type == "button":
                button_elements.append(shape)
            elif element_type == "container":
                container_elements.append(shape)
            elif element_type == "slider":
                slider_elements.append(shape)
            elif element_type == "icon":
                icon_elements.append(shape)
            elif element_type == "illustration":
                illustration_elements.append(shape)
            elif element_type == "chart":
                chart_elements.append(shape)
            elif element_type == "divider":
                divider_elements.append(shape)
        
        # Criar descri√ß√£o da paleta de cores com base na an√°lise original
        color_palette = composition_analysis.get("color_palette", {})
        all_colors = color_palette.get("all_colors", [colors["primary"], colors["secondary"], colors["accent"]])
        
        # Combina√ß√£o das cores originais com as cores variadas
        color_description = f"""
PALETA DE CORES (baseada na imagem original):
- Cor prim√°ria: {colors['primary']} (mantendo o esquema crom√°tico da an√°lise original)
- Cor secund√°ria: {colors['secondary']}
- Cor de destaque: {colors['accent']}
- Cores adicionais da imagem original: {', '.join(all_colors[:5])}
- Cor de texto principal: {color_palette.get('text', '#1F1F1F')}
- Cor de fundo principal: {color_palette.get('background', colors['secondary'])}
"""
        
        # Detalhes de texturas da imagem original
        textures = composition_analysis.get("textures", {})
        if textures:
            color_description += "\nTEXTURAS (baseadas na imagem original):\n"
            for texture_name, texture_info in textures.items():
                texture_type = texture_info.get("type", "flat")
                texture_colors = texture_info.get("colors", [])
                texture_direction = texture_info.get("direction", "none")
                
                color_description += f"- {texture_name}: tipo {texture_type}"
                if texture_colors:
                    color_description += f", cores {', '.join(texture_colors[:3])}"
                if texture_direction != "none":
                    color_description += f", dire√ß√£o {texture_direction}"
                color_description += "\n"
        
        # Criar descri√ß√£o de layout fiel √† imagem original
        layout_description = "LAYOUT E ESTRUTURA (reproduzindo a imagem original):\n"
        
        # Mapeamento de regi√µes ocupadas para determinar o layout
        regions = {
            "top": [], "middle": [], "bottom": [],
            "left": [], "center": [], "right": []
        }
        
        # Analisar todos os elementos para determinar a distribui√ß√£o no layout
        all_elements = text_elements + shape_elements
        for elem in all_elements:
            bbox = elem.get("bbox", [0, 0, 0, 0])
            elem_center_x = bbox[0] + bbox[2]/2
            elem_center_y = bbox[1] + bbox[3]/2
            
            # Classificar verticalmente
            if elem_center_y < height * 0.33:
                regions["top"].append(elem)
            elif elem_center_y < height * 0.66:
                regions["middle"].append(elem)
            else:
                regions["bottom"].append(elem)
                
            # Classificar horizontalmente
            if elem_center_x < width * 0.33:
                regions["left"].append(elem)
            elif elem_center_x < width * 0.66:
                regions["center"].append(elem)
            else:
                regions["right"].append(elem)
        
        # Descrever a distribui√ß√£o dos elementos
        layout_description += "- Distribui√ß√£o de elementos mantida fiel √† imagem original:\n"
        
        for region_name, elems in regions.items():
            if elems:
                element_types = []
                for e in elems:
                    if e.get("type") == "text":
                        element_types.append(f"texto '{e.get('value', '')}'" if len(e.get('value', '')) < 30 else f"texto '{e.get('value', '')[:30]}...'")
                    else:
                        element_types.append(f"{e.get('shape_type', 'forma')} {e.get('value', '')}")
                
                layout_description += f"  * Regi√£o {region_name}: {len(elems)} elementos ({', '.join(element_types[:3])})\n"
        
        # Analisar fundos e estruturas principais
        background_info = composition_analysis.get("textures", {}).get("background", {})
        background_type = background_info.get("type", "flat")
        
        if background_type == "gradient" or background_type == "radial-gradient":
            layout_description += f"""
- Fundo com {background_type}:
  * Cores: {', '.join(background_info.get('colors', [colors['primary'], shift_hue(colors['primary'], -30)]))}
  * Dire√ß√£o: {background_info.get('direction', 'top-to-bottom')}
"""
        elif background_type == "pattern":
            layout_description += f"""
- Fundo com padr√£o do tipo {background_info.get('type', 'geom√©trico')}:
  * Cores: {', '.join(background_info.get('colors', [colors['primary'], colors['secondary']]))}
"""
        else:
            # Identificar se existem formas grandes que funcionam como se√ß√µes
            large_shapes = [s for s in shape_elements if (s.get("bbox", [0,0,0,0])[2] > width*0.5 and s.get("bbox", [0,0,0,0])[3] > height*0.2)]
            
            if large_shapes:
                layout_description += "- Estrutura com se√ß√µes de cores distintas:\n"
                for i, shape in enumerate(large_shapes):
                    bbox = shape.get("bbox", [0, 0, 0, 0])
                    position_y = (bbox[1] + bbox[3]/2) / height
                    position_str = "superior" if position_y < 0.33 else "central" if position_y < 0.66 else "inferior"
                    shape_color = shape.get("value", colors["primary"])
                    
                    layout_description += f"  * Se√ß√£o {position_str}: forma {shape.get('shape_type', 'ret√¢ngulo')} na cor {shape_color}\n"
            else:
                layout_description += f"""
- Fundo principal na cor {color_palette.get('background', colors['secondary'])}
- Elementos distribu√≠dos de acordo com a hierarquia visual original
"""
        
        # Descri√ß√£o detalhada de cada elemento de texto preservando posi√ß√µes originais
        text_description = "ELEMENTOS DE TEXTO (mantendo posi√ß√µes exatas da imagem original):\n"
        
        for i, text in enumerate(text_elements):
            value = text.get("value", "")
            font = text.get("font", {})
            color = font.get("color", "#000000")
            size = font.get("size", 16)
            weight = font.get("weight", "regular")
            alignment = font.get("alignment", "center")
            visual_hierarchy = text.get("visual_hierarchy", "")
            bbox = text.get("bbox", [0, 0, 0, 0])
            
            # Determinar posicionamento exato
            x_pos = bbox[0]
            y_pos = bbox[1]
            width_percent = int((bbox[2] / width) * 100)
            x_center_percent = int(((bbox[0] + bbox[2]/2) / width) * 100)
            y_center_percent = int(((bbox[1] + bbox[3]/2) / height) * 100)
            
            # Descri√ß√£o de posicionamento preciso
            position_desc = f"posi√ß√£o exata a {x_center_percent}% da largura e {y_center_percent}% da altura"
            if x_center_percent < 33:
                position_desc += ", alinhado √† esquerda"
            elif x_center_percent > 66:
                position_desc += ", alinhado √† direita"
            else:
                position_desc += ", centralizado horizontalmente"
                
            # Determinar estilo de destaque baseado na an√°lise original
            highlight_style = f"tamanho {size}px, peso {weight}, alinhamento {alignment}"
            highlight_style += f", na cor {color}"
            
            if visual_hierarchy == "primary":
                highlight_style = f"destaque principal, {highlight_style}"
            elif visual_hierarchy == "secondary":
                highlight_style = f"destaque secund√°rio, {highlight_style}"
            
            # Adicionar descri√ß√£o do texto com posicionamento preciso
            text_description += f"""
- Texto "{value}":
  * {position_desc}
  * Estilo: {highlight_style}
  * Largura aproximada: {width_percent}% da largura total
  * Preservar exatamente essa hierarquia visual
"""
        
        # Descri√ß√£o de elementos visuais originais (formas, bot√µes, etc.)
        visual_elements = "ELEMENTOS VISUAIS (da imagem original):\n"
        
        # Identificar e descrever elementos com fun√ß√µes espec√≠ficas
        buttons = []
        containers = []
        decorative = []
        
        for shape in shape_elements:
            shape_type = shape.get("shape_type", "rectangle")
            value = shape.get("value", "")  # cor
            bbox = shape.get("bbox", [0, 0, 0, 0])
            width_percent = int((bbox[2] / width) * 100)
            height_percent = int((bbox[3] / height) * 100)
            x_center_percent = int(((bbox[0] + bbox[2]/2) / width) * 100)
            y_center_percent = int(((bbox[1] + bbox[3]/2) / height) * 100)
            
            # Posicionamento exato
            position_desc = f"posi√ß√£o a {x_center_percent}% da largura e {y_center_percent}% da altura"
            
            # Classificar o elemento pela fun√ß√£o aparente
            if height_percent < 15 and width_percent < 50 and width_percent > 15:
                buttons.append({
                    "shape": shape,
                    "position": position_desc,
                    "width": width_percent,
                    "height": height_percent
                })
            elif width_percent > 50 and height_percent > 20:
                containers.append({
                    "shape": shape,
                    "position": position_desc,
                    "width": width_percent,
                    "height": height_percent
                })
            else:
                decorative.append({
                    "shape": shape,
                    "position": position_desc,
                    "width": width_percent,
                    "height": height_percent
                })
        
        # Descrever bot√µes
        if buttons:
            visual_elements += "- Bot√µes (preservar exatamente como na imagem original):\n"
            for i, btn in enumerate(buttons):
                shape = btn["shape"]
                visual_elements += f"""
  * Bot√£o {i+1}: {shape.get('shape_type', 'ret√¢ngulo')} na cor {shape.get('value', '#CCCCCC')}
    - {btn['position']}
    - Tamanho: {btn['width']}% √ó {btn['height']}% da tela
    - Cantos: {shape.get('corners', 'arredondados')}
    - Opacidade: {shape.get('opacity', 1.0)}
    - {shape.get('texture', {}).get('type', 'flat')}
"""
        
        # Descrever containers
        if containers:
            visual_elements += "- Containers/Se√ß√µes principais:\n"
            for i, cont in enumerate(containers):
                shape = cont["shape"]
                visual_elements += f"""
  * Container {i+1}: {shape.get('shape_type', 'ret√¢ngulo')} na cor {shape.get('value', '#FFFFFF')}
    - {cont['position']}
    - Tamanho: {cont['width']}% √ó {cont['height']}% da tela
    - Cantos: {shape.get('corners', 'arredondados')}
    - Opacidade: {shape.get('opacity', 1.0)}
    - Conte√∫do posicionado conforme layout original
"""
        
        # Descrever elementos decorativos
        if decorative:
            visual_elements += "- Elementos decorativos/gr√°ficos:\n"
            for i, dec in enumerate(decorative):
                shape = dec["shape"]
                visual_elements += f"""
  * Elemento {i+1}: {shape.get('shape_type', 'forma')} na cor {shape.get('value', '#CCCCCC')}
    - {dec['position']}
    - Tamanho: {dec['width']}% √ó {dec['height']}% da tela
"""
        
        # Descrever efeitos especiais e ilumina√ß√£o da imagem original
        lighting = composition_analysis.get("lighting", {})
        effects_description = "EFEITOS VISUAIS E ACABAMENTO (da imagem original):\n"
        
        if lighting:
            main_light = lighting.get("main", {})
            effects_description += f"""
- Ilumina√ß√£o principal: tipo {main_light.get('type', 'ambient')}
  * Posi√ß√£o: {main_light.get('position', 'top-right')}
  * Intensidade: {main_light.get('intensity', 'medium')}
  * Efeito: {main_light.get('effect', 'adds depth to the composition')}

- Efeitos de destaque: {lighting.get('highlights', {}).get('effect', 'subtle glow on key elements')}
"""
        
        effects_description += """
- Aplique sombras suaves nos textos principais para garantir legibilidade perfeita
- Adicione profundidade com micro-sombras em elementos sobrepostos
- Inclua reflexos sutis em superf√≠cies (bot√µes, caixas) para apar√™ncia profissional
- Mantenha consist√™ncia nos estilos de fonte e espa√ßamentos
- Reserve espa√ßo limpo para inser√ß√£o posterior de logo na parte inferior
"""
        
        # Combinar todas as se√ß√µes em um prompt completo, mantendo fidelidade ao original
        prompt = f"""
Crie uma imagem no formato vertical, com dimens√µes exatas de {width}x{height} pixels, que reproduza fielmente o layout da imagem original analisada, seguindo estas especifica√ß√µes detalhadas:

PALETA DE CORES:
- Cor prim√°ria: {colors['primary']} (use para elementos principais, √°reas de destaque e textos importantes)
- Cor secund√°ria: {colors['secondary']} (use para fundos, √°reas neutras e elementos de suporte)
- Cor de destaque/acento: {colors['accent']} (use para bot√µes, √≠cones e elementos interativos)
- Cor de texto principal: {color_palette.get('text', '#1F1F1F')} (para textos de alta legibilidade)
- Cor de texto secund√°rio: #5A5A5A (para textos legais e menos importantes)

ESTRUTURA DO FUNDO:
{layout_description}

ELEMENTOS DE TEXTO (posicionados exatamente como na imagem original):
{text_description}

ELEMENTOS VISUAIS (reproduzindo fielmente os elementos da imagem original):
{visual_elements}

COMPONENTES ESPEC√çFICOS E DETALHES INTERNOS:
{len(card_elements) > 0 and f"""
CART√ÉO DE CR√âDITO/D√âBITO:
- Posicionado exatamente como na imagem original
- Textura de m√°rmore fluido, misturando tons de {colors['primary']}, {shift_hue(colors['primary'], 20)} e {shift_hue(colors['primary'], 40)}
- Detalhes realistas: chip dourado ou prateado com circuitos vis√≠veis, s√≠mbolo de contactless com ondas
- N√∫meros impressos em alto relevo com fonte espec√≠fica para cart√µes (divididos em grupos de 4, formato: 5678 **** **** 1234)
- Data de validade no formato MM/AA na posi√ß√£o correta abaixo do n√∫mero principal
- Logo da bandeira (Visa/Mastercard/Elo/American Express) no canto inferior direito
- Nome do cliente em fonte espec√≠fica (n√£o preencher com texto real, usar "NOME DO CLIENTE")
- Brilho especular vindo do topo direito criando reflexos na superf√≠cie
- Rota√ß√£o suave para visual din√¢mico (manter √¢ngulo exatamente como na imagem original)
- Sombra realista abaixo do cart√£o com desfoque suave para sensa√ß√£o de profundidade
- Borda fina mais clara ao redor de todo o cart√£o para efeito de separa√ß√£o com o fundo
""" or ""}

{len(button_elements) > 0 and f"""
BOT√ïES:
- Bot√µes com cantos perfeitamente arredondados (raio de 8-12px)
- Bot√£o principal (CTA) na cor {colors['accent']} com texto em branco ou {colors['secondary']}
- Estilo 3D sutilmente elevado com pequeno gradiente vertical (mais claro no topo)
- Bot√µes secund√°rios em {shift_hue(colors['primary'], 30)} ou em cinza claro (#E0E0E0)
- Efeito de press√£o com sombra interna nos bot√µes selecionados
- Textura glossy sutil nos bot√µes com reflexo horizontal na parte superior
- Borda fina mais clara (1px) no topo e esquerda, e mais escura na direita e base
- Sombra externa muito suave (2-3px de desfoque, opacidade 20%)
- Texto centralizado com padding horizontal adequado (pelo menos 20px de cada lado)
- √çcone opcional alinhado ao texto (se existir na imagem original)
""" or ""}

{len(slider_elements) > 0 and f"""
SLIDER/CONTROLE DESLIZANTE:
- Trilho horizontal com textura met√°lica elegante em cinza gradiente (#CCCCCC at√© #999999)
- Altura exata do trilho como na imagem original (geralmente 4-6px)
- Bot√£o deslizante (thumb) circular ou oval na cor {colors['primary']} com tamanho exato como original
- √Årea preenchida do trilho (√† esquerda do thumb) com gradiente na cor {colors['primary']} at√© {shift_hue(colors['primary'], 20)}
- Leve sombra no bot√£o deslizante para sensa√ß√£o de eleva√ß√£o (1-2px offset, 3-4px blur)
- Efeito de brilho interno no thumb para apar√™ncia premium
- Marcadores de valor (ticks) abaixo do trilho, se presentes na imagem original
- Valores num√©ricos exatos nos extremos (m√≠nimo/m√°ximo) como na imagem original
- Posi√ß√£o do thumb mantida exatamente como na refer√™ncia
""" or ""}

{len(chart_elements) > 0 and f"""
GR√ÅFICOS FINANCEIROS:
- Reproduza exatamente o mesmo tipo de gr√°fico da imagem original (barras, linhas, pizza, etc.)
- Utilize as cores prim√°ria {colors['primary']} e de destaque {colors['accent']} para os dados principais
- Para gr√°ficos de linha: linha suave com gradiente abaixo dela, partindo da cor principal at√© transparente
- Para gr√°ficos de barra: barras com cantos arredondados e sutil gradiente vertical
- Para gr√°ficos de pizza: bordas refinadas entre segmentos e leve efeito 3D
- Legendas ou labels exatamente como na imagem original, com fonte leg√≠vel e n√≠tida
- Valores num√©ricos precisos conforme original, alinhados adequadamente
- Grid de fundo sutil quando presente na imagem original (linhas cinza claro #EEEEEE)
- Sombra muito suave sob todo o gr√°fico para destac√°-lo do fundo
- Manter todos os elementos de intera√ß√£o vis√≠veis na imagem original (tooltips, pontos de dados destacados)
""" or ""}

{len(icon_elements) > 0 and f"""
√çCONES:
- √çcones minimalistas e modernos na cor {colors['primary']} ou {colors['accent']}
- Estilo consistente entre todos os √≠cones (flat, outline, duotone ou solid)
- √çcones financeiros espec√≠ficos quando relevantes:
  * Cifr√£o/s√≠mbolo monet√°rio com design clean para representar dinheiro/pagamento
  * Carteira ou cart√£o para pagamentos e transa√ß√µes
  * Gr√°fico ascendente para investimentos ou crescimento
  * Escudo para seguran√ßa financeira
  * Rel√≥gio/calend√°rio para prazos e pagamentos
  * Porcentagem para taxas de juros
  * Casa para financiamento imobili√°rio
  * M√£os para empr√©stimos ou suporte
- Tamanho e posicionamento exatos como na imagem original
- Leve brilho ou sombra quando destacados no design original
""" or ""}

{len(container_elements) > 0 and f"""
CAIXAS/CONT√äINERES:
- Cont√™ineres com cantos arredondados precisos (raio de 12-16px, ou exatamente como original)
- Fundo em {colors['secondary']} com gradiente muito sutil para evitar apar√™ncia plana
- Borda refinada de 1-2px mais escura ou mais clara conforme design original
- Sombra externa suave para efeito flutuante (4-6px blur, 30% opacidade)
- Organiza√ß√£o interna do conte√∫do mantendo espa√ßamento e alinhamento da imagem original
- Linhas separadoras horizontais entre se√ß√µes quando presentes (cor #E0E0E0, 1px)
- Headers internos destacados com texto em negrito ou cor contrastante
- Parte superior possivelmente mais escura/destacada quando usado como cabe√ßalho
- Espa√ßamento interno (padding) consistente, geralmente 16-24px
- Elementos espec√≠ficos (√≠cones, bot√µes) posicionados precisamente como na refer√™ncia
""" or ""}

{"""
ELEMENTOS FINANCEIROS ESPEC√çFICOS:
- Simuladores de valor: caixas com valores monet√°rios destacados em fonte grande e negrito
  * Cifr√£o/s√≠mbolo monet√°rio alinhado corretamente (precedendo o valor ou sobrescrito)
  * Valores decimais em tamanho menor ou cor mais clara quando presentes
  * R√≥tulos explicativos posicionados acima ou ao lado dos valores

- Taxas de juros: valores percentuais destacados com s√≠mbolo "%" claro
  * Texto explicativo complementar como "ao m√™s" ou "ao ano" em tamanho menor
  * Cores contrastantes para diferenciar taxas promocionais ou condi√ß√µes especiais

- Prazos e parcelas: combina√ß√£o de n√∫meros e texto com hierarquia clara
  * N√∫mero de parcelas em destaque quando relevante (ex: "12x")
  * Valor da parcela com s√≠mbolo monet√°rio em formato padronizado
  * Prazo total do financiamento/empr√©stimo quando aplic√°vel

- Quadro de benef√≠cios: lista de vantagens com √≠cones associados
  * Marcadores visuais consistentes (check, bullet points, etc.)
  * Espa√ßamento igual entre itens da lista
  * √çcones alinhados verticalmente √† esquerda do texto

- Formul√°rios ou campos: √°reas para preenchimento com apar√™ncia interativa
  * Cantos arredondados e borda sutil
  * Labels posicionados consistentemente (acima ou dentro do campo)
  * Campos obrigat√≥rios com marca√ß√£o visual quando identific√°veis
  * Bot√£o de submiss√£o alinhado e destacado com a cor prim√°ria ou de destaque
"""}

EFEITOS E ACABAMENTO:
- Ilumina√ß√£o principal vinda da dire√ß√£o superior direita
- Aplique sombras suaves aos elementos principais para criar profundidade
- Textos principais devem ter sombras sutis para garantir legibilidade em qualquer fundo
- Bot√µes devem ter efeito de press√£o/clique com sombra interna suave
- Caixas e cont√™ineres devem ter sombra suave para simular eleva√ß√£o
- Elementos de destaque devem ter brilho sutil (glow) para atrair aten√ß√£o
- Mantenha consist√™ncia nos estilos de fonte em toda a composi√ß√£o
- Aplique texturas sutis em √°reas grandes para evitar apar√™ncia plana
- Reserve espa√ßo limpo na parte inferior para inser√ß√£o posterior de logo

INSTRU√á√ïES ESPEC√çFICAS DE COMPOSI√á√ÉO:
- Posicione todos os elementos EXATAMENTE nas mesmas posi√ß√µes relativas da imagem original
- Mantenha a hierarquia visual e o fluxo de leitura da imagem original
- Preserve os espa√ßamentos e margens entre elementos como na imagem analisada
- Mantenha propor√ß√µes exatas como especificado ({width}x{height} pixels)
- Garanta PERFEITA legibilidade de todos os textos com contraste adequado
- Se a imagem original tiver se√ß√µes distintas de cor, reproduza-as fielmente
- Os tamanhos e pesos das fontes devem seguir a hierarquia da imagem original
- Bot√µes e elementos interativos devem ser claramente identific√°veis
- Elementos decorativos devem complementar o layout sem disputar aten√ß√£o
- √Åreas de respiro (espa√ßo em branco) devem ser mantidas para equil√≠brio visual

IMPORTANTE: Este n√£o √© um layout gen√©rico. A composi√ß√£o final deve ser ID√äNTICA √† imagem original analisada, apenas com as cores e textos atualizados conforme especificado acima. Todos os elementos, suas posi√ß√µes, tamanhos relativos e hierarquia visual devem ser reproduzidos com m√°xima fidelidade.
"""
        
        log("‚úì Prompt detalhado baseado na imagem original criado com sucesso")
        return prompt
        
    except Exception as e:
        log(f"‚ö†Ô∏è Erro no Agente Compositor Prompts Avan√ßados: {str(e)}")
        return f"""
Crie uma imagem de an√∫ncio digital profissional que REPRODUZA o layout da imagem original analisada, com dimens√µes exatas de {width}x{height} pixels.

Use a seguinte paleta de cores:
- Cor prim√°ria: {colors['primary']}
- Cor secund√°ria: {colors['secondary']}
- Cor de destaque: {colors['accent']}

IMPORTANTE: Mantenha o mesmo layout e posicionamento de elementos da imagem original.
Garanta que todos os textos sejam perfeitamente leg√≠veis.
Reserve espa√ßo na parte inferior para inser√ß√£o posterior de logo.
"""

# Interface principal com fluxo de trabalho passo a passo
def main():
    st.markdown("### Sistema de cria√ß√£o automatizada de an√∫ncios para marketing digital")
    st.markdown("Este aplicativo utiliza m√∫ltiplos agentes de IA para criar an√∫ncios otimizados para convers√£o.")
    
    # Etapa 1: Upload da imagem de refer√™ncia
    if st.session_state.step == 1:
        st.header("1Ô∏è‚É£ Etapa 1: Upload da imagem de refer√™ncia")
        
        uploaded_file = st.file_uploader(
            "Carregue uma imagem de an√∫ncio de refer√™ncia", 
            type=["png", "jpg", "jpeg"]
        )
        
        if uploaded_file:
            st.image(uploaded_file, caption="Imagem de refer√™ncia carregada", use_container_width=True)
            
            if st.button("Analisar composi√ß√£o", use_container_width=True):
                with st.spinner("Analisando a composi√ß√£o da imagem..."):
                    # Salvar imagem no disco temporariamente
                    timestamp = int(time.time())
                    filename = f"reference_{timestamp}{Path(uploaded_file.name).suffix}"
                    img_path = TEMP_DIR / filename
                    img_path.write_bytes(uploaded_file.getvalue())
                    
                    # Armazenar na sess√£o
                    st.session_state.uploaded_image = str(img_path)
                    
                    # Analisar composi√ß√£o
                    composition = agente_composer(img_path)
                    st.session_state.composition_analysis = composition
                    
                    # Avan√ßar para a pr√≥xima etapa
                    st.session_state.step = 2
                    st.rerun()
    
    # Etapa 2: Escolher textos otimizados
    elif st.session_state.step == 2:
        st.header("2Ô∏è‚É£ Etapa 2: Escolher textos otimizados")
        
        if not st.session_state.composition_analysis:
            st.error("An√°lise de composi√ß√£o n√£o encontrada. Por favor, volte √† etapa 1.")
            if st.button("Voltar √† etapa 1"):
                st.session_state.step = 1
                st.rerun()
        else:
            # Mostrar imagem de refer√™ncia
            st.subheader("Imagem de refer√™ncia")
            st.image(st.session_state.uploaded_image, width=300)
            
            # Gerar sugest√µes de copy se ainda n√£o temos
            if not st.session_state.copy_suggestions:
                with st.spinner("Gerando textos otimizados..."):
                    suggestions = agente_copy(st.session_state.composition_analysis)
                    st.session_state.copy_suggestions = suggestions
            
            # Verificar se temos sugest√µes
            if not st.session_state.copy_suggestions.get("suggestions", []):
                st.warning("N√£o foi poss√≠vel gerar sugest√µes de texto. Tente novamente.")
                if st.button("Tentar novamente"):
                    st.session_state.copy_suggestions = None
                    st.rerun()
            else:
                # Exibir sugest√µes para sele√ß√£o
                st.subheader("Selecione os textos para o an√∫ncio")
                
                selections = {}
                for suggestion in st.session_state.copy_suggestions.get("suggestions", []):
                    st.markdown(f"**Elemento original:** {suggestion.get('original', '')}")
                    st.markdown(f"*{suggestion.get('explanation', '')}*")
                    
                    # Criar op√ß√µes de sele√ß√£o
                    options = suggestion.get("alternatives", [])
                    # Adicionar texto original como op√ß√£o
                    all_options = [suggestion.get("original", "(texto original)")] + options
                    
                    # Permitir sele√ß√£o
                    selected = st.selectbox(
                        f"Selecione o texto para este elemento:",
                        all_options,
                        key=f"select_{suggestion.get('id', 'unknown')}"
                    )
                    
                    # Armazenar sele√ß√£o
                    selections[suggestion.get("id", "")] = selected
                    
                    st.divider()
                
                # Bot√£o para aprovar as sele√ß√µes
                if st.button("Confirmar sele√ß√µes e gerar designs", use_container_width=True):
                    # Criar objeto de approved_copy
                    approved = {"suggestions": []}
                    for suggestion in st.session_state.copy_suggestions.get("suggestions", []):
                        approved["suggestions"].append({
                            "id": suggestion.get("id", ""),
                            "original": suggestion.get("original", ""),
                            "selected": selections.get(suggestion.get("id", ""), suggestion.get("original", ""))
                        })
                    
                    st.session_state.approved_copy = approved
                    st.session_state.step = 3
                    st.rerun()
    
    # Etapa 3: Gerar e escolher designs
    elif st.session_state.step == 3:
        st.header("3Ô∏è‚É£ Etapa 3: Selecionar design")
        
        if not st.session_state.approved_copy:
            st.error("Textos aprovados n√£o encontrados. Por favor, volte √† etapa 2.")
            if st.button("Voltar √† etapa 2"):
                st.session_state.step = 2
                st.rerun()
        else:
            # Gerar designs se ainda n√£o temos
            if not st.session_state.generated_designs:
                with st.spinner("Gerando designs... Isso pode levar alguns minutos."):
                    designs = agente_designer(
                        st.session_state.composition_analysis,
                        st.session_state.approved_copy,
                        num_variations=4
                    )
                    st.session_state.generated_designs = designs
            
            # Verificar se temos designs
            if not st.session_state.generated_designs:
                st.warning("N√£o foi poss√≠vel gerar designs. Tente novamente.")
                if st.button("Tentar novamente"):
                    st.session_state.generated_designs = []
                    st.rerun()
            else:
                # Exibir designs para sele√ß√£o
                st.subheader("Selecione o design preferido")
                st.markdown("Escolha um dos designs abaixo para continuar:")
                
                # Organizar os designs em grid
                cols = st.columns(2)
                for i, design in enumerate(st.session_state.generated_designs):
                    with cols[i % 2]:
                        st.image(design["path"], caption=f"Design {i+1}: Esquema {design['colors']['scheme']}", use_container_width=True)
                        if st.button(f"Selecionar Design {i+1}", key=f"select_design_{i}", use_container_width=True):
                            st.session_state.selected_design = design
                            st.session_state.step = 4
                            st.rerun()
    
    # Etapa 4: Verifica√ß√£o e finaliza√ß√£o
    elif st.session_state.step == 4:
        st.header("4Ô∏è‚É£ Etapa 4: Verifica√ß√£o e finaliza√ß√£o")
        
        if not st.session_state.selected_design:
            st.error("Design selecionado n√£o encontrado. Por favor, volte √† etapa 3.")
            if st.button("Voltar √† etapa 3"):
                st.session_state.step = 3
                st.rerun()
        else:
            # Configura√ß√µes para inser√ß√£o de logo
            st.subheader("Inserir logo (opcional)")
            uploaded_logo = st.file_uploader("Carregue um logo (opcional)", type=["png", "jpg", "jpeg"])
            
            logo_path = None
            if uploaded_logo:
                # Salvar logo temporariamente
                timestamp = int(time.time())
                logo_filename = f"logo_{timestamp}{Path(uploaded_logo.name).suffix}"
                logo_path = TEMP_DIR / logo_filename
                logo_path.write_bytes(uploaded_logo.getvalue())
                st.image(logo_path, caption="Logo carregado", width=200)
            
            # Bot√£o para verificar e finalizar
            if st.button("Verificar e finalizar design", use_container_width=True):
                with st.spinner("Verificando design e finalizando..."):
                    # Executar verifica√ß√£o e finaliza√ß√£o
                    final_check = agente_double_checker(
                        st.session_state.selected_design["path"],
                        logo_path
                    )
                    
                    st.session_state.final_design = final_check
                    st.session_state.step = 5
                    st.rerun()
    
    # Etapa 5: Resultado final e edi√ß√µes
    elif st.session_state.step == 5:
        st.header("5Ô∏è‚É£ Etapa 5: Resultado final")
        
        if not st.session_state.final_design:
            st.error("Design final n√£o encontrado. Por favor, volte √† etapa 4.")
            if st.button("Voltar √† etapa 4"):
                st.session_state.step = 4
                st.rerun()
        else:
            # Exibir o design final
            st.subheader("Design final")
            st.image(st.session_state.final_design["design_path"], caption="Design final", use_container_width=True)
            
            # Mostrar relat√≥rio de verifica√ß√£o
            st.subheader("Relat√≥rio de verifica√ß√£o")
            
            if st.session_state.final_design.get("has_errors", False):
                st.warning("Foram encontrados problemas no design:")
                for error in st.session_state.final_design.get("errors", []):
                    st.markdown(f"- **{error.get('type', '')}**: {error.get('description', '')}")
                    st.markdown(f"  *Sugest√£o*: {error.get('correction', '')}")
            else:
                st.success("Nenhum problema encontrado no design!")
            
            # Exibir sugest√µes de melhoria
            if st.session_state.final_design.get("improvement_suggestions", []):
                st.subheader("Sugest√µes de melhoria")
                for suggestion in st.session_state.final_design.get("improvement_suggestions", []):
                    st.markdown(f"- {suggestion}")
            
            # Avalia√ß√£o final
            if "final_assessment" in st.session_state.final_design:
                st.subheader("Avalia√ß√£o final")
                st.markdown(st.session_state.final_design["final_assessment"])
            
            # Agente Editor - permitir edi√ß√µes
            st.subheader("Editar design")
            edits = st.text_area(
                "Descreva as edi√ß√µes que deseja fazer no design:",
                height=150,
                placeholder="Ex: Aumentar o tamanho do texto principal, mudar a cor do bot√£o para vermelho, adicionar uma sombra sutil..."
            )
            
            if edits and st.button("Aplicar edi√ß√µes", use_container_width=True):
                with st.spinner("Aplicando edi√ß√µes ao design..."):
                    # Executar o agente editor
                    edit_result = agente_editor(
                        st.session_state.final_design["design_path"],
                        edits
                    )
                    
                    if edit_result["success"]:
                        # Atualizar o design final
                        st.session_state.final_design["design_path"] = edit_result["path"]
                        st.success("Edi√ß√µes aplicadas com sucesso!")
                        st.rerun()
                    else:
                        st.error(f"Falha ao aplicar edi√ß√µes: {edit_result['message']}")
            
            # Bot√£o para download
            design_path = Path(st.session_state.final_design["design_path"])
            if design_path.exists():
                with open(design_path, "rb") as f:
                    st.download_button(
                        label="Baixar design final",
                        data=f,
                        file_name=design_path.name,
                        mime="image/png",
                        use_container_width=True
                    )
            
            # Bot√£o para recome√ßar
            if st.button("Criar novo an√∫ncio", use_container_width=True):
                # Reiniciar o estado da sess√£o
                st.session_state.step = 1
                st.session_state.uploaded_image = None
                st.session_state.composition_analysis = None
                st.session_state.copy_suggestions = None
                st.session_state.approved_copy = None
                st.session_state.generated_designs = []
                st.session_state.selected_design = None
                st.session_state.final_design = None
                st.rerun()

if __name__ == "__main__":
    main() 