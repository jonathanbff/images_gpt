#!/usr/bin/env python3
"""
image_edit.py
Interface Streamlit simplificada para edi√ß√£o de imagens usando GPT-image-1

Executar:
  streamlit run image_edit.py
"""
import streamlit as st
import base64
import json
import os
from pathlib import Path
from io import BytesIO
from PIL import Image
import tempfile
from dotenv import load_dotenv
import time

# Carregar vari√°veis de ambiente do arquivo .env
load_dotenv()

# Importar cliente OpenAI
from openai import OpenAI

# Configura√ß√µes do aplicativo
st.set_page_config(
    page_title="Editor de Imagens IA",
    page_icon="üñºÔ∏è",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Diret√≥rio para arquivos tempor√°rios
TEMP_DIR = Path(tempfile.gettempdir()) / "image_edit"
TEMP_DIR.mkdir(exist_ok=True)

# Diret√≥rio para salvar as imagens geradas
OUTPUT_DIR = Path("outputs")
OUTPUT_DIR.mkdir(exist_ok=True)

# Inicializar o estado da sess√£o
if "uploaded_images" not in st.session_state:
    st.session_state.uploaded_images = []

if "prompt" not in st.session_state:
    st.session_state.prompt = ""

if "result_image" not in st.session_state:
    st.session_state.result_image = None

if "logs" not in st.session_state:
    st.session_state.logs = []

# Fun√ß√£o para registrar logs
def log(msg):
    st.session_state.logs.append(msg)
    st.session_state.logs = st.session_state.logs[-50:]  # Manter apenas os √∫ltimos 50 logs

# Fun√ß√£o para salvar imagem tempor√°ria
def save_temp_image(image_bytes, filename):
    """Salva uma imagem tempor√°ria no disco e retorna o caminho"""
    path = TEMP_DIR / filename
    path.write_bytes(image_bytes)
    return path

# Fun√ß√£o para processar as imagens e gerar a edi√ß√£o
def generate_edited_image():
    # Verificar se existem imagens carregadas
    if not st.session_state.uploaded_images:
        st.error("Por favor, carregue pelo menos uma imagem de refer√™ncia.")
        return False
    
    # Verificar se h√° prompt
    if not st.session_state.prompt:
        st.error("Por favor, forne√ßa um prompt de edi√ß√£o.")
        return False
    
    # Verificar se a API key est√° dispon√≠vel
    api_key = os.getenv("OPENAI_API_KEY", "")
    if not api_key:
        api_key = st.session_state.get("api_key", "")
        if not api_key:
            st.error("API Key da OpenAI n√£o encontrada. Por favor, insira manualmente ou configure no arquivo .env")
            return False
    
    # Inicializar cliente OpenAI
    client = OpenAI(api_key=api_key)
    
    try:
        with st.spinner("Gerando imagem editada..."):
            # Carregar imagens como arquivos bin√°rios
            image_files = []
            for img in st.session_state.uploaded_images:
                # Se for um objeto UploadedFile, usar diretamente
                if hasattr(img, 'read'):
                    image_files.append(img)
                # Se for um caminho de arquivo, abrir o arquivo
                else:
                    image_path = Path(img)
                    if image_path.exists():
                        image_files.append(open(image_path, "rb"))
            
            log(f"Enviando {len(image_files)} imagens para processamento")
            log(f"Prompt: {st.session_state.prompt}")
            
            # Chamar a API para edi√ß√£o de imagem
            result = client.images.edit(
                model="gpt-image-1",
                image=image_files,
                prompt=st.session_state.prompt,
            )
            
            # Fechar arquivos abertos se necess√°rio
            for img in image_files:
                if hasattr(img, 'close') and not hasattr(img, 'name'):  # Se for um arquivo aberto manualmente
                    img.close()
            
            # Processar o resultado
            if result.data and result.data[0].b64_json:
                log("Imagem gerada com sucesso")
                
                # Converter base64 para bytes
                image_base64 = result.data[0].b64_json
                image_bytes = base64.b64decode(image_base64)
                
                # Gerar nome de arquivo com timestamp atual
                temp_filename = f"edited_image_{int(time.time())}.png"
                temp_path = save_temp_image(image_bytes, temp_filename)
                
                # Salvar em outputs para refer√™ncia futura
                output_path = OUTPUT_DIR / temp_filename
                output_path.write_bytes(image_bytes)
                
                log(f"Imagem salva em {output_path}")
                
                # Armazenar resultado para exibi√ß√£o
                st.session_state.result_image = {
                    "bytes": image_bytes,
                    "path": str(output_path)
                }
                
                return True
            else:
                st.error("N√£o foi poss√≠vel gerar a imagem. Verifique as imagens de refer√™ncia e o prompt.")
                return False
    
    except Exception as e:
        st.error(f"Erro durante o processamento: {str(e)}")
        log(f"Erro: {str(e)}")
        return False

# Interface do usu√°rio
st.title("üñºÔ∏è Editor de Imagens com IA")

st.markdown("""
Este aplicativo permite editar e combinar imagens usando o modelo GPT-image-1 da OpenAI.
Fa√ßa upload de imagens de refer√™ncia e forne√ßa um prompt descritivo do resultado desejado.
""")

# Sidebar para configura√ß√µes
with st.sidebar:
    st.header("Configura√ß√µes")
    
    # API Key (se n√£o estiver no .env)
    api_key_env = os.getenv("OPENAI_API_KEY", "")
    if not api_key_env:
        api_key = st.text_input("OpenAI API Key", type="password", 
                               help="Insira sua chave de API da OpenAI ou configure no arquivo .env")
        if api_key:
            st.session_state.api_key = api_key
            os.environ["OPENAI_API_KEY"] = api_key
    else:
        st.success("API Key carregada do arquivo .env")
    
    st.subheader("Exemplos de Prompts")
    
    prompt_examples = [
        "Gere uma imagem fotorrealista de uma cesta de presentes em fundo branco rotulada 'Relax & Unwind', com uma fita e fonte manuscrita, contendo todos os itens nas imagens de refer√™ncia.",
        "Combine todas as imagens de refer√™ncia em uma √∫nica composi√ß√£o art√≠stica no estilo de uma natureza morta renascentista.",
        "Crie uma cena de produto comercial profissional mostrando todos os itens das imagens de refer√™ncia organizados elegantemente.",
        "Transforme os objetos das imagens de refer√™ncia em uma √∫nica ilustra√ß√£o coesa no estilo cartoon minimalista."
    ]
    
    selected_example = st.selectbox("Exemplos de prompts", 
                                   options=["Selecione um exemplo..."] + prompt_examples,
                                   index=0)
    
    if selected_example != "Selecione um exemplo...":
        if st.button("Usar este exemplo"):
            st.session_state.prompt = selected_example

# √Årea principal
col1, col2 = st.columns([1, 1])

with col1:
    st.subheader("Imagens de Refer√™ncia")
    
    # Upload de m√∫ltiplas imagens
    uploaded_files = st.file_uploader("Carregar imagens de refer√™ncia", type=["png", "jpg", "jpeg"], accept_multiple_files=True)
    
    if uploaded_files:
        st.session_state.uploaded_images = uploaded_files
        
        # Mostrar as imagens carregadas
        st.write(f"{len(uploaded_files)} imagens carregadas:")
        image_cols = st.columns(min(3, len(uploaded_files)))
        
        for i, img_file in enumerate(uploaded_files):
            with image_cols[i % 3]:
                st.image(img_file, caption=f"Imagem {i+1}", use_container_width=True)
    
    st.subheader("Prompt de Edi√ß√£o")
    
    # √Årea de texto para o prompt
    prompt = st.text_area("Descreva o resultado desejado", 
                         value=st.session_state.prompt,
                         height=150, 
                         help="Seja espec√≠fico sobre como voc√™ deseja que as imagens sejam combinadas ou editadas")
    
    if prompt:
        st.session_state.prompt = prompt
    
    # Bot√£o para processar
    if st.button("Gerar Imagem Editada", use_container_width=True):
        generate_edited_image()

with col2:
    st.subheader("Resultado")
    
    if st.session_state.result_image:
        # Exibir a imagem gerada
        result_image = st.session_state.result_image
        image = Image.open(BytesIO(result_image["bytes"]))
        st.image(image, caption="Imagem Gerada", use_container_width=True)
        
        # Bot√£o para download
        st.download_button(
            label="Baixar Imagem",
            data=result_image["bytes"],
            file_name=Path(result_image["path"]).name,
            mime="image/png"
        )
    else:
        st.info("A imagem editada aparecer√° aqui ap√≥s o processamento.")

# √Årea de logs
with st.expander("üìã Logs"):
    st.text_area("Detalhes do Processamento", value="\n".join(st.session_state.logs), height=200)

# Informa√ß√µes de ajuda
with st.expander("‚ÑπÔ∏è Como Usar"):
    st.markdown("""
    ### Instru√ß√µes de Uso
    
    1. **Carregue imagens de refer√™ncia**: Fa√ßa upload de at√© 4 imagens que voc√™ deseja combinar ou editar.
    2. **Escreva um prompt detalhado**: Descreva exatamente como voc√™ deseja que as imagens sejam combinadas ou alteradas.
    3. **Clique em "Gerar Imagem Editada"**: Aguarde enquanto a IA processa sua solicita√ß√£o.
    4. **Baixe o resultado**: Ap√≥s a gera√ß√£o, voc√™ pode visualizar e baixar a imagem resultante.
    
    ### Dicas para Melhores Resultados
    
    - Use imagens com fundos limpos para melhor integra√ß√£o
    - Seja espec√≠fico sobre posicionamento, estilo e apar√™ncia desejada
    - Para melhores resultados, limite o n√∫mero de imagens de entrada (2-4 geralmente √© ideal)
    - Resolu√ß√µes mais altas produzem resultados mais detalhados
    """)

st.caption("Editor de Imagens com IA v1.0 - Desenvolvido com OpenAI GPT-image-1 e Streamlit") 