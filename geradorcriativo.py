#!/usr/bin/env python3
"""
geradorcriativo.py
Gera 3 varia√ß√µes criativas de uma imagem com diferentes cores e textos usando GPT-image-1.

Requisitos:
  pip install openai python-dotenv pillow

Uso:
  python geradorcriativo.py -i imagem.png
"""
import argparse
import base64
import json
import os
import sys
from datetime import datetime
from pathlib import Path
from io import BytesIO
import re

from openai import OpenAI
from PIL import Image
from dotenv import load_dotenv

# Configura√ß√£o b√°sica
load_dotenv()

MODEL_VISION = "gpt-4o-mini"
MODEL_TEXT = "gpt-4o-mini"
MODEL_IMAGE = "gpt-image-1"

OUT_DIR = Path("outputs")
DEFAULT_SIZE = "1024x1536"
DEFAULT_STYLE = "photorealistic"

client = OpenAI()

# Utilit√°rios
def log(msg):
    print(f"[{datetime.now():%H:%M:%S}] {msg}")

def image_to_base64(path):
    data = base64.b64encode(path.read_bytes()).decode()
    mime = "image/png" if path.suffix.lower() == ".png" else "image/jpeg"
    return f"data:{mime};base64,{data}"

def ensure_size(img_bytes, w, h):
    img = Image.open(BytesIO(img_bytes)).convert("RGBA")
    if img.size != (w, h):
        img = img.resize((w, h), Image.LANCZOS)
    buf = BytesIO()
    img.save(buf, "PNG")
    return buf.getvalue()

# Analisador de imagem
def analisar_imagem(img_path):
    log("Analisando layout da imagem com reconhecimento detalhado de componentes")
    b64 = image_to_base64(img_path)
    
    prompt = """
    Analise esta imagem de forma EXTREMAMENTE DETALHADA e extraia:
    
    1. Dimens√µes exatas em pixels
    2. Elementos principais com descri√ß√µes precisas:
       - Textos: conte√∫do exato, fonte, peso, alinhamento, cor e hierarquia visual
       - Formas: tipo exato (ret√¢ngulo, c√≠rculo, etc.), cor, opacidade, borda
       - Imagens/√çcones: descri√ß√£o detalhada, fun√ß√£o comunicativa
       - Logotipos: descri√ß√£o completa, posicionamento
       - Bot√µes: formato, cantos, sombras, efeitos
    3. Cores:
       - C√≥digo hexadecimal exato de TODAS as cores
       - Rela√ß√µes entre cores (prim√°ria, secund√°ria, destaque)
       - Gradientes, transpar√™ncias ou efeitos especiais
    4. Layout e composi√ß√£o:
       - Alinhamentos exatos (superior, inferior, centro)
       - Margens e espa√ßamentos precisos
       - Grids ou estruturas percept√≠veis
       - Hierarquia visual e fluxo de leitura
    5. Estilos visuais:
       - Estilo tipogr√°fico (serifa, sans-serif, espessura)
       - Elementos decorativos
       - Texturiza√ß√£o ou tratamentos especiais
       - Estilo global (minimalista, corporativo, colorido, etc.)
    6. Texturas e efeitos de ilumina√ß√£o:
       - Tipos de texturas por elemento (gradiente, met√°lico, plano, m√°rmore, etc.)
       - Dire√ß√£o e intensidade das texturas
       - Efeitos de luz e sombra (especular, brilho suave, reflexo)
       - Tratamentos de superf√≠cie (fosco, brilhante, acetinado)
    
    MUITO IMPORTANTE: Sua resposta deve ser um objeto JSON v√°lido com a estrutura especificada abaixo. 
    N√£o inclua explica√ß√µes, coment√°rios ou texto adicional fora do objeto JSON.
    
    {
        "canvas_size": {"w": W, "h": H},
        "placeholders": [
            {
                "id": "1", 
                "type": "text", 
                "value": "texto exato", 
                "bbox": [x, y, w, h], 
                "font": {
                    "color": "#HEX",
                    "size": N,
                    "family": "tipo da fonte",
                    "weight": "peso", 
                    "alignment": "alinhamento", 
                    "style": "estilo"
                },
                "layer": 1,
                "description": "descri√ß√£o detalhada da fun√ß√£o deste texto",
                "visual_hierarchy": "prim√°rio/secund√°rio/terci√°rio"
            },
            {
                "id": "2", 
                "type": "shape", 
                "shape_type": "ret√¢ngulo/c√≠rculo/etc",
                "value": "#HEX", 
                "bbox": [x, y, w, h],
                "opacity": 1.0,
                "border": {"color": "#HEX", "width": N},
                "corners": "arredondado/reto",
                "shadow": true/false,
                "layer": 0,
                "description": "fun√ß√£o desta forma na composi√ß√£o",
                "texture": {
                    "type": "flat/gradient/metallic/glossy/marble/etc",
                    "colors": ["#HEX1", "#HEX2"],
                    "direction": "diagonal/vertical/radial",
                    "intensity": "low/medium/high"
                }
            }
        ],
        "color_palette": {
            "primary": "#HEX",
            "secondary": "#HEX",
            "accent": "#HEX",
            "text": "#HEX",
            "background": "#HEX",
            "all_colors": ["#HEX1", "#HEX2", "#HEX3", "#HEX4"]
        },
        "textures": {
            "background": {
                "type": "flat/gradient/pattern",
                "colors": ["#HEX1", "#HEX2"],
                "direction": "top-to-bottom/radial/diagonal",
                "intensity": "low/medium/high"
            },
            "primary_elements": {
                "type": "glossy/metallic/matte/marble",
                "colors": ["#HEX1", "#HEX2"],
                "effect": "descri√ß√£o do efeito visual"
            },
            "buttons": {
                "type": "flat/glossy/gradient",
                "colors": ["#HEX1", "#HEX2"]
            }
        },
        "lighting": {
            "main": {
                "type": "ambient/specular/soft-glow",
                "position": "top-right/center/etc",
                "intensity": "low/medium/high",
                "effect": "descri√ß√£o do efeito visual"
            },
            "highlights": {
                "targets": ["ID-1", "ID-2"],
                "effect": "descri√ß√£o do efeito de destaque"
            }
        }
    }
    """
    
    # Exemplo para compreens√£o do formato esperado
    example = """
    Exemplo de an√°lise com texturas e ilumina√ß√£o:
    {
      "canvas_size": { "width": 768, "height": 1365 },
      "color_palette": ["#D90000", "#FFFFFF", "#F1F1F1", "#1F1F1F", "#05A874"],
      "textures": {
        "background": {
          "type": "radial-gradient",
          "colors": ["#D90000", "#8B0000"],
          "center": "top-center"
        },
        "credit_card": {
          "type": "fluid-marble",
          "colors": ["#D90000", "#FF4D4D", "#FFA3A3"],
          "direction": "diagonal",
          "intensity": "medium"
        },
        "button_unselected": {
          "type": "flat",
          "color": "#E0E0E0"
        },
        "button_selected": {
          "type": "glossy",
          "gradient": ["#D90000", "#A10000"]
        },
        "slider_track": {
          "type": "metallic",
          "color": "#CCCCCC"
        }
      },
      "lighting": {
        "card": {
          "type": "specular",
          "position": "top-right",
          "intensity": "high",
          "effect": "adds depth and gloss to card surface"
        },
        "background": {
          "type": "soft-glow",
          "position": "center",
          "intensity": "low",
          "effect": "focus user attention on content center"
        },
        "highlight_elements": {
          "targets": ["limit-amount", "15"],
          "effect": "subtle light bloom"
        }
      },
      "placeholders": [
        {
          "id": "background",
          "type": "background-shape",
          "role": "background",
          "style": {
            "fillColor": "gradient from textures.background"
          }
        },
        {
          "id": "credit-card-image",
          "type": "illustration",
          "role": "hero",
          "style": {
            "position": "top",
            "angle": "rotated (approx. -20 degrees)",
            "colors": ["#D90000", "#F83535"],
            "texture": "textures.credit_card",
            "features": ["chip", "contactless icon", "VISA logo"],
            "lighting": "lighting.card"
          }
        }
      ]
    }
    """
    
    # Primeira tentativa com temperatura 0 para m√°xima precis√£o
    res = client.chat.completions.create(
        model=MODEL_VISION,
        messages=[{
            "role": "user",
            "content": [
                {"type": "image_url", "image_url": {"url": b64}},
                {"type": "text", "text": prompt}
            ]
        }],
        temperature=0,
        response_format={"type": "json_object"}  # For√ßar formato JSON
    )
    
    content = res.choices[0].message.content
    
    try:
        # Tentar parsear diretamente como JSON
        result = json.loads(content)
        log("‚úì An√°lise JSON obtida com sucesso")
        return result
    except json.JSONDecodeError as e:
        log(f"‚ö†Ô∏è Erro ao decodificar JSON: {str(e)}")
        
        # Tentar extrair apenas a parte JSON da resposta
        json_start = content.find('{')
        json_end = content.rfind('}') + 1
        
        if json_start >= 0 and json_end > json_start:
            try:
                json_content = content[json_start:json_end]
                result = json.loads(json_content)
                log("‚úì JSON extra√≠do com sucesso da resposta parcial")
                return result
            except json.JSONDecodeError:
                log("‚ö†Ô∏è Falha ao extrair JSON da resposta")
        
        # Segunda tentativa com um prompt simplificado
        log("üîÑ Tentando nova abordagem com prompt simplificado")
        
        # Prompt simplificado focado apenas nos elementos essenciais
        simple_prompt = """
        Analise esta imagem e extraia apenas:
        1. Dimens√µes em pixels
        2. Elementos principais (textos, formas, bot√µes)
        3. Cores predominantes com c√≥digos hexadecimais
        
        Retorne APENAS um objeto JSON v√°lido com esta estrutura simples:
        {
            "canvas_size": {"w": W, "h": H},
            "placeholders": [
                {"id": "1", "type": "text", "value": "texto", "bbox": [x, y, w, h]},
                {"id": "2", "type": "shape", "value": "#HEX", "bbox": [x, y, w, h]},
                {"id": "3", "type": "button", "value": "texto do bot√£o", "bbox": [x, y, w, h]}
            ],
            "color_palette": ["#HEX1", "#HEX2", "#HEX3"]
        }
        
        N√ÉO inclua explica√ß√µes ou texto fora do JSON. Apenas o objeto JSON v√°lido.
        """
        
        res2 = client.chat.completions.create(
            model=MODEL_VISION,
            messages=[{
                "role": "user",
                "content": [
                    {"type": "image_url", "image_url": {"url": b64}},
                    {"type": "text", "text": simple_prompt}
                ]
            }],
            temperature=0,
            response_format={"type": "json_object"}  # For√ßar formato JSON
        )
        
        content2 = res2.choices[0].message.content
        
        try:
            # Tentar parsear a segunda resposta
            result = json.loads(content2)
            log("‚úì An√°lise obtida com prompt simplificado")
            
            # Converter o formato simples para o formato esperado
            if "color_palette" in result and isinstance(result["color_palette"], list) and len(result["color_palette"]) > 0:
                result["color_palette"] = {
                    "primary": result["color_palette"][0],
                    "secondary": result["color_palette"][1] if len(result["color_palette"]) > 1 else result["color_palette"][0],
                    "accent": result["color_palette"][2] if len(result["color_palette"]) > 2 else result["color_palette"][0],
                    "text": "#FFFFFF",  # Valor padr√£o
                    "background": result["color_palette"][0],
                    "all_colors": result["color_palette"]
                }
            
            # Adicionar layout m√≠nimo
            result["layout"] = {
                "background": result["color_palette"]["primary"] if isinstance(result["color_palette"], dict) else "#FFFFFF",
                "grid_structure": "layout padr√£o",
                "margins": [10, 10, 10, 10],
                "visual_flow": "topo para baixo"
            }
            
            # Adicionar estilo m√≠nimo
            result["style"] = {
                "typography": "sans-serif padr√£o",
                "visual_style": "corporativo padr√£o",
                "effects": []
            }
            
            return result
        except json.JSONDecodeError:
            # Se todas as tentativas falharem, criar um modelo b√°sico a partir da resposta textual
            log("‚ö†Ô∏è Criando modelo b√°sico a partir da an√°lise textual")
            
            # Extrair informa√ß√µes b√°sicas do texto
            colors = re.findall(r'#[0-9A-Fa-f]{6}', content + content2)
            texts = re.findall(r'"([^"]+)"', content + content2)
            
            # Criar um modelo b√°sico com informa√ß√µes extra√≠das
            basic_model = {
                "canvas_size": {"w": 1024, "h": 1536},  # Tamanhos padr√£o
                "placeholders": [],
                "color_palette": {
                    "primary": colors[0] if colors else "#800080",  # Roxo padr√£o da imagem de exemplo
                    "secondary": colors[1] if len(colors) > 1 else "#FFFFFF",
                    "accent": colors[2] if len(colors) > 2 else "#FFA500",
                    "text": "#FFFFFF",
                    "background": colors[0] if colors else "#800080",
                    "all_colors": colors if colors else ["#800080", "#FFFFFF", "#FFA500"]
                },
                "layout": {
                    "background": colors[0] if colors else "#800080",
                    "grid_structure": "layout padr√£o",
                    "margins": [10, 10, 10, 10],
                    "visual_flow": "topo para baixo"
                },
                "style": {
                    "typography": "sans-serif padr√£o",
                    "visual_style": "corporativo padr√£o",
                    "effects": []
                },
                "raw_analysis": content  # Guardar a an√°lise original para refer√™ncia
            }
            
            # Adicionar textos encontrados como placeholders
            for i, text in enumerate(texts[:5]):  # Limitar a 5 textos
                if len(text) > 3:  # Ignorar textos muito curtos
                    basic_model["placeholders"].append({
                        "id": str(i+1),
                        "type": "text",
                        "value": text,
                        "bbox": [10, 100 + i*100, 800, 50],  # Posi√ß√£o estimada
                        "font": {
                            "color": "#FFFFFF",
                            "size": 16,
                            "family": "sans-serif",
                            "weight": "normal",
                            "alignment": "left",
                            "style": "normal"
                        },
                        "layer": 1,
                        "description": f"Texto {i+1}",
                        "visual_hierarchy": "prim√°rio" if i == 0 else "secund√°rio"
                    })
            
            # Adicionar formas b√°sicas
            basic_model["placeholders"].append({
                "id": str(len(basic_model["placeholders"])+1),
                "type": "shape",
                "shape_type": "ret√¢ngulo",
                "value": basic_model["color_palette"]["primary"],
                "bbox": [0, 0, 1024, 768],
                "opacity": 1.0,
                "border": {"color": "none", "width": 0},
                "corners": "reto",
                "shadow": False,
                "layer": 0,
                "description": "Fundo principal"
            })
            
            # Adicionar bot√£o
            basic_model["placeholders"].append({
                "id": str(len(basic_model["placeholders"])+1),
                "type": "button",
                "value": "PE√áA J√Å!",
                "bbox": [300, 800, 400, 80],
                "colors": {"bg": basic_model["color_palette"]["accent"], "text": "#FFFFFF"},
                "corners": "arredondado",
                "description": "Bot√£o de call-to-action"
            })
            
            return basic_model

# Gerador de varia√ß√µes
def gerar_variacoes(spec, num_variacoes=3):
    log("Gerando varia√ß√µes textuais e de cores com preserva√ß√£o rigorosa da estrutura compositiva")
    
    prompt = f"""
    Com base nesta an√°lise DETALHADA da imagem, crie {num_variacoes} varia√ß√µes com novos textos, esquemas de cores e texturas, 
    PRESERVANDO RIGOROSAMENTE a composi√ß√£o e estrutura de design originais.
    
    REGRAS CRUCIAIS PARA PRESERVA√á√ÉO DA IDENTIDADE VISUAL:
    1. ESTRUTURA COMPOSITIVA: Mantenha EXATAMENTE a mesma distribui√ß√£o espacial, grid, hierarquia visual e fluxo de leitura
    2. ELEMENTOS GR√ÅFICOS PRINCIPAIS: Preserve todas as formas e elementos estruturais em suas posi√ß√µes e propor√ß√µes originais
    3. TIPOGRAFIA: Mantenha o mesmo estilo tipogr√°fico, pesos, tamanhos relativos e hierarquia entre textos
    4. LOGOTIPOS: Preserve intactos em posi√ß√£o, tamanho e propor√ß√£o
    
    ELEMENTOS QUE PODEM SER ALTERADOS:
    1. CORES: Crie paletas harmonicamente derivadas da original usando:
       - Tons an√°logos (cores adjacentes no c√≠rculo crom√°tico)
       - Tons complementares (cores opostas no c√≠rculo crom√°tico) 
       - Varia√ß√µes monocrom√°ticas (diferentes luminosidades da mesma cor)
       - Preserve sempre o contraste e legibilidade originais
    
    2. TEXTURAS: Modifique texturas mantendo a identidade visual:
       - Substitua entre tipos compat√≠veis (gradiente‚Üígradiente, flat‚Üíflat)
       - Alterne entre texturas planas, gradientes, met√°licas ou marmorizadas
       - Aplique varia√ß√µes nas propriedades da textura como dire√ß√£o ou intensidade
       - Mantenha compatibilidade com o elemento e sua fun√ß√£o na composi√ß√£o
    
    3. TEXTOS: Altere apenas o conte√∫do textual mantendo:
       - Mesmo tom comunicativo e registro lingu√≠stico
       - Comprimento similar (n√∫mero de caracteres, linhas)
       - Mesmo prop√≥sito comunicativo de cada texto
       - Mesma hierarquia de informa√ß√£o
    
    4. EFEITOS DE ILUMINA√á√ÉO: Modifique com sutileza:
       - Altere a dire√ß√£o ou intensidade da ilumina√ß√£o
       - Adicione ou remova brilhos sutis
       - Ajuste reflexos em elementos com superf√≠cies brilhantes
       - Mantenha a legibilidade e clareza da informa√ß√£o
    
    5. PEQUENOS DETALHES DECORATIVOS: Apenas elementos n√£o-estruturais como:
       - Texturas sutis
       - √çcones secund√°rios (mantendo estilo e fun√ß√£o)
       - Efeitos de sombra ou brilho
    
    Use o seguinte formato JSON:
    
    {{
      "variacoes": [
        {{
          "id": "variacao1",
          "cores": {{
            "primaria": "#HEX1",
            "secundaria": "#HEX2", 
            "destaque": "#HEX3",
            "background": "#HEX4",
            "texto": "#HEX5",
            "derivacao": "an√°loga/complementar/monocrom√°tica"
          }},
          "texturas": {{
            "background": {{
              "type": "tipo-de-textura", 
              "colors": ["#HEX1", "#HEX2"],
              "direction": "dire√ß√£o",
              "intensity": "intensidade"
            }},
            "elementos_principais": {{
              "type": "tipo-de-textura",
              "colors": ["#HEX1", "#HEX2"]
            }},
            "botoes": {{
              "type": "tipo-de-textura",
              "colors": ["#HEX1", "#HEX2"]
            }}
          }},
          "iluminacao": {{
            "principal": {{
              "type": "tipo-de-iluminacao",
              "position": "posi√ß√£o",
              "intensity": "intensidade"
            }},
            "destaques": [
              "elemento1", "elemento2"
            ]
          }},
          "textos": {{
            "1": "Novo texto para o elemento 1",
            "2": "Novo texto para o elemento 2",
            "3": "Novo texto para o elemento 3"
          }},
          "ideia_grafica": "Descri√ß√£o EXTREMAMENTE DETALHADA da varia√ß√£o, especificando: 1. A estrutura EXATA mantida da imagem original (grid, layout, alinhamentos) 2. CADA elemento visual e sua posi√ß√£o preservada 3. As altera√ß√µes ESPEC√çFICAS de cores (com c√≥digos HEX precisos) e texturas 4. As altera√ß√µes textuais e seu impacto visual 5. Detalhes de refinamento est√©tico permitidos 6. Instru√ß√µes EXPL√çCITAS para manter propor√ß√µes, tamanhos e espa√ßamentos originais"
        }},
        ... mais varia√ß√µes ...
      ]
    }}
    
    IMPORTANTE:
    - Analise METICULOSAMENTE todos os detalhes da composi√ß√£o original antes de propor varia√ß√µes
    - Para cada elemento visual, determine explicitamente o que ser√° mantido vs. alterado
    - Crie varia√ß√µes que pare√ßam pertencer √† mesma fam√≠lia visual/marca, apenas com leves altera√ß√µes
    - Inclua na descri√ß√£o gr√°fica refer√™ncias num√©ricas exatas (posi√ß√µes, tamanhos, propor√ß√µes)
    """
    
    try:
        res = client.chat.completions.create(
            model=MODEL_TEXT,
            messages=[{"role": "system", "content": prompt},
                     {"role": "user", "content": json.dumps(spec, ensure_ascii=False, indent=2)}],
            temperature=0.7,
            response_format={"type": "json_object"}  # For√ßar formato JSON
        )
        
        content = res.choices[0].message.content
        
        try:
            # Tentar parsear diretamente como JSON
            result = json.loads(content)
            log("‚úì Varia√ß√µes geradas com sucesso")
            return result
        except json.JSONDecodeError as e:
            log(f"‚ö†Ô∏è Erro ao decodificar JSON das varia√ß√µes: {str(e)}")
            
            # Tentar extrair apenas a parte JSON da resposta
            json_start = content.find('{')
            json_end = content.rfind('}') + 1
            
            if json_start >= 0 and json_end > json_start:
                try:
                    json_content = content[json_start:json_end]
                    result = json.loads(json_content)
                    log("‚úì JSON de varia√ß√µes extra√≠do com sucesso da resposta parcial")
                    return result
                except json.JSONDecodeError:
                    log("‚ö†Ô∏è Falha ao extrair JSON das varia√ß√µes")
    except Exception as e:
        log(f"‚ö†Ô∏è Erro ao chamar API para varia√ß√µes: {str(e)}")
    
    # Se todas as tentativas falharem, criar varia√ß√µes b√°sicas
    log("‚ÑπÔ∏è Criando varia√ß√µes b√°sicas automaticamente")
    
    # Extrair cores da paleta original
    colors = spec.get("color_palette", {})
    if isinstance(colors, dict):
        primary = colors.get("primary", "#800080")  # Roxo padr√£o
        secondary = colors.get("secondary", "#FFFFFF")
        accent = colors.get("accent", "#FFA500")
    elif isinstance(colors, list) and len(colors) > 0:
        primary = colors[0]
        secondary = colors[1] if len(colors) > 1 else "#FFFFFF"
        accent = colors[2] if len(colors) > 2 else "#FFA500"
    else:
        primary, secondary, accent = "#800080", "#FFFFFF", "#FFA500"
    
    # Gerar paletas de cores derivadas
    paletas = [
        # Original com pequenas varia√ß√µes
        {
            "primaria": primary,
            "secundaria": secondary,
            "destaque": accent,
            "background": primary,
            "texto": "#FFFFFF",
            "derivacao": "original"
        },
        # An√°loga
        {
            "primaria": shift_hue(primary, 30),
            "secundaria": shift_hue(secondary, 15),
            "destaque": shift_hue(accent, 45),
            "background": shift_hue(primary, 30),
            "texto": "#FFFFFF",
            "derivacao": "an√°loga"
        },
        # Complementar
        {
            "primaria": shift_hue(primary, 180),
            "secundaria": shift_hue(secondary, 180),
            "destaque": accent,
            "background": shift_hue(primary, 180),
            "texto": "#FFFFFF",
            "derivacao": "complementar"
        }
    ]
    
    # Extrair textos originais dos placeholders
    textos_originais = {}
    for p in spec.get("placeholders", []):
        if p.get("type") == "text" and "value" in p:
            textos_originais[p["id"]] = p["value"]
    
    # Gerar alternativas de texto simples (baseado no tipo do elemento)
    textos_alternativos = {}
    for id, texto in textos_originais.items():
        if "empr√©stimo" in texto.lower() or "r$" in texto.lower():
            textos_alternativos[id] = [
                "Cr√©dito de at√© R$ 5.000*",
                "Empr√©stimo facilitado",
                "Dinheiro na hora para voc√™"
            ]
        elif "cpf" in texto.lower():
            textos_alternativos[id] = [
                "Apenas com seu CPF*",
                "Sem burocracia e r√°pido",
                "Processo 100% digital"
            ]
        elif "prazo" in texto.lower() or "meses" in texto.lower():
            textos_alternativos[id] = [
                "9 meses",
                "15 meses",
                "18 meses"
            ]
        elif "pe√ßa" in texto.lower() or "fa√ßa" in texto.lower() or "j√°" in texto.lower():
            textos_alternativos[id] = [
                "SOLICITE AGORA!",
                "CLIQUE AQUI!",
                "QUERO AGORA!"
            ]
        else:
            textos_alternativos[id] = [
                f"Novo texto {id}",
                f"Alternativa {id}",
                f"Varia√ß√£o {id}"
            ]
    
    # Montar as varia√ß√µes
    variacoes = []
    for i in range(min(num_variacoes, 3)):  # Limitar a 3 varia√ß√µes
        textos = {}
        for id in textos_originais:
            opcoes = textos_alternativos.get(id, [f"Texto {id}"])
            textos[id] = opcoes[i % len(opcoes)]
        
        variacoes.append({
            "id": f"variacao{i+1}",
            "cores": paletas[i],
            "textos": textos,
            "ideia_grafica": (
                f"Manter rigorosamente a mesma composi√ß√£o, estrutura e layout da imagem original. "
                f"Alterar apenas: 1) esquema de cores para a paleta {paletas[i]['derivacao']} indicada, "
                f"2) textos conforme especificado, mantendo mesma fonte, peso e alinhamento. "
                f"Preservar todas as posi√ß√µes, tamanhos, propor√ß√µes e a hierarquia visual original."
            )
        })
    
    return {"variacoes": variacoes}

# Utilidade para manipula√ß√£o de cores
def shift_hue(hex_color, degrees):
    """Desloca o matiz de uma cor em X graus no c√≠rculo crom√°tico"""
    # Remover # se presente
    hex_color = hex_color.lstrip('#')
    
    # Converter hex para RGB
    r = int(hex_color[0:2], 16) / 255.0
    g = int(hex_color[2:4], 16) / 255.0
    b = int(hex_color[4:6], 16) / 255.0
    
    # Converter RGB para HSL
    max_c = max(r, g, b)
    min_c = min(r, g, b)
    l = (max_c + min_c) / 2
    
    if max_c == min_c:
        h = s = 0  # acrom√°tico
    else:
        d = max_c - min_c
        s = d / (2 - max_c - min_c) if l > 0.5 else d / (max_c + min_c)
        
        if max_c == r:
            h = (g - b) / d + (6 if g < b else 0)
        elif max_c == g:
            h = (b - r) / d + 2
        else:
            h = (r - g) / d + 4
        
        h /= 6
    
    # Deslocar o matiz
    h = (h + degrees/360) % 1
    
    # Converter HSL de volta para RGB
    if s == 0:
        r = g = b = l  # acrom√°tico
    else:
        def hue_to_rgb(p, q, t):
            t %= 1
            if t < 1/6: return p + (q - p) * 6 * t
            if t < 1/2: return q
            if t < 2/3: return p + (q - p) * (2/3 - t) * 6
            return p
        
        q = l * (1 + s) if l < 0.5 else l + s - l * s
        p = 2 * l - q
        r = hue_to_rgb(p, q, h + 1/3)
        g = hue_to_rgb(p, q, h)
        b = hue_to_rgb(p, q, h - 1/3)
    
    # Converter RGB de volta para hex
    return "#{:02x}{:02x}{:02x}".format(
        int(r * 255), int(g * 255), int(b * 255)
    )

# Gerador de imagens
def gerar_imagens(variacoes, spec, size=DEFAULT_SIZE, style=DEFAULT_STYLE):
    log("Gerando criativos otimizados para marketing digital e plataformas sociais")
    
    w, h = map(int, size.split("x"))
    resultados = []
    
    # Determinar plataforma com base no tamanho
    if size == "1024x1536":
        platform_type = "Facebook Feed/Stories (formato vertical)"
    elif size == "1536x1024":
        platform_type = "Google Display (formato horizontal)"
    elif size == "1024x1024":
        platform_type = "Instagram (formato quadrado)"
    else:
        platform_type = "Redes Sociais (formato padr√£o)"
    
    for i, v in enumerate(variacoes):
        # Compatibilidade com diferentes formatos de cores
        if isinstance(v.get("cores"), dict):
            # Novo formato (dicion√°rio)
            cores = v["cores"]
            cores_str = f"prim√°ria {cores.get('primaria', '#FFFFFF')} (80% da superf√≠cie), secund√°ria {cores.get('secundaria', '#CCCCCC')} (detalhes), " \
                       f"destaque {cores.get('destaque', '#FF0000')} (CTA e pontos focais), texto {cores.get('texto', '#000000')}"
        elif isinstance(v.get("cores"), list) and len(v["cores"]) > 0:
            # Formato antigo (lista)
            cores = {
                "primaria": v["cores"][0],
                "secundaria": v["cores"][1] if len(v["cores"]) > 1 else v["cores"][0],
                "destaque": v["cores"][2] if len(v["cores"]) > 2 else v["cores"][0],
                "texto": "#FFFFFF",
                "background": v["cores"][0]
            }
            cores_str = ", ".join(v["cores"])
        else:
            # Fallback para caso n√£o haja cores definidas
            cores = {
                "primaria": "#800080",  # Roxo padr√£o
                "secundaria": "#FFFFFF",
                "destaque": "#FFA500",
                "texto": "#FFFFFF",
                "background": "#800080"
            }
            cores_str = "cores padr√£o"
        
        # Extrair defini√ß√µes de textura, se dispon√≠veis
        texturas_str = ""
        if "texturas" in v and isinstance(v["texturas"], dict):
            texturas = v["texturas"]
            
            # Textura de fundo
            if "background" in texturas:
                bg_texture = texturas["background"]
                bg_colors = ", ".join(bg_texture.get("colors", [cores.get("background", "#800080")]))
                texturas_str += f"""
                TEXTURA DE FUNDO:
                - Tipo: {bg_texture.get('type', 'plana')}
                - Cores: {bg_colors}
                - Dire√ß√£o: {bg_texture.get('direction', 'n√£o especificada')}
                - Intensidade: {bg_texture.get('intensity', 'm√©dia')}
                """
            
            # Textura dos elementos principais
            if "elementos_principais" in texturas:
                elem_texture = texturas["elementos_principais"]
                elem_colors = ", ".join(elem_texture.get("colors", [cores.get("primaria", "#800080")]))
                texturas_str += f"""
                TEXTURA DOS ELEMENTOS PRINCIPAIS:
                - Tipo: {elem_texture.get('type', 'plana')}
                - Cores: {elem_colors}
                """
            
            # Textura dos bot√µes
            if "botoes" in texturas:
                btn_texture = texturas["botoes"]
                btn_colors = ", ".join(btn_texture.get("colors", [cores.get("destaque", "#FFA500")]))
                texturas_str += f"""
                TEXTURA DOS BOT√ïES:
                - Tipo: {btn_texture.get('type', 'plana')}
                - Cores: {btn_colors}
                """
        else:
            # Usar texturas do spec original se dispon√≠veis
            if "textures" in spec:
                spec_textures = spec["textures"]
                texturas_str = "TEXTURAS DA COMPOSI√á√ÉO:\n"
                
                for key, texture in spec_textures.items():
                    if isinstance(texture, dict):
                        texture_type = texture.get('type', 'n√£o especificada')
                        texture_colors = ", ".join(texture.get('colors', [])) if 'colors' in texture else texture.get('color', 'n√£o especificada')
                        texturas_str += f"- {key}: tipo {texture_type}, cores {texture_colors}\n"
            else:
                # Fallback para texturas b√°sicas baseadas nas cores
                texturas_str = """
                TEXTURAS B√ÅSICAS:
                - Fundo: gradiente suave com cor prim√°ria
                - Elementos de destaque: acabamento brilhante
                - Bot√µes: efeito glossy para destacar √°rea clic√°vel
                """
        
        # Extrair defini√ß√µes de ilumina√ß√£o, se dispon√≠veis
        iluminacao_str = ""
        if "iluminacao" in v and isinstance(v["iluminacao"], dict):
            ilum = v["iluminacao"]
            
            # Ilumina√ß√£o principal
            if "principal" in ilum:
                main_light = ilum["principal"]
                iluminacao_str += f"""
                ILUMINA√á√ÉO PRINCIPAL:
                - Tipo: {main_light.get('type', 'ambiente')}
                - Posi√ß√£o: {main_light.get('position', 'superior-direita')}
                - Intensidade: {main_light.get('intensity', 'm√©dia')}
                """
            
            # Elementos destacados
            if "destaques" in ilum and isinstance(ilum["destaques"], list):
                destaques = ", ".join(ilum["destaques"])
                iluminacao_str += f"""
                ELEMENTOS COM DESTAQUE DE LUZ:
                - {destaques}
                """
        else:
            # Usar ilumina√ß√£o do spec original se dispon√≠vel
            if "lighting" in spec:
                spec_lighting = spec["lighting"]
                iluminacao_str = "ILUMINA√á√ÉO DA COMPOSI√á√ÉO:\n"
                
                for key, light in spec_lighting.items():
                    if isinstance(light, dict):
                        light_type = light.get('type', 'n√£o especificada')
                        light_position = light.get('position', 'n√£o especificada')
                        light_intensity = light.get('intensity', 'm√©dia')
                        iluminacao_str += f"- {key}: tipo {light_type}, posi√ß√£o {light_position}, intensidade {light_intensity}\n"
            else:
                # Fallback para ilumina√ß√£o b√°sica
                iluminacao_str = """
                ILUMINA√á√ÉO B√ÅSICA:
                - Luz principal: superior-direita, ambiente
                - Destaque sutil nos elementos de convers√£o (CTA, valores)
                """
                
        # Obter uma refer√™ncia ao layout original atrav√©s dos dados em spec
        layout_original = "Grid original estruturado"
        if "layout" in spec and "grid_structure" in spec["layout"]:
            layout_original = f"Grid original: {spec['layout']['grid_structure']}"
            
        estilo_original = "Estilo corporativo"
        if "style" in spec and "visual_style" in spec["style"]:
            estilo_original = f"Estilo visual: {spec['style']['visual_style']}"
        
        prompt = f"""
        Gere um AN√öNCIO DIGITAL OTIMIZADO para {platform_type} com as seguintes especifica√ß√µes:
        
        DIMENS√ïES E FORMATO:
        - Propor√ß√£o: {size} (formato otimizado para {platform_type})
        - Estilo: {style} com apelo visual para marketing digital
        
        ESQUEMA DE CORES PARA MARKETING:
        {cores_str}
        
        TEXTURAS E TRATAMENTOS DE SUPERF√çCIE:
        {texturas_str}
        
        EFEITOS DE ILUMINA√á√ÉO E DESTAQUES:
        {iluminacao_str}
        
        INSTRU√á√ïES PARA PRESERVA√á√ÉO DA ESTRUTURA CONVERSORA:
        1. Mantenha a mesma estrutura compositiva e fluxo visual que leva ao CTA
        2. Preserve a hierarquia de informa√ß√µes que comunica claramente a proposta de valor
        3. Mantenha os elementos em posi√ß√µes que otimizam a jornada visual do usu√°rio
        4. Crie um visual que capture aten√ß√£o nos primeiros 2 segundos de visualiza√ß√£o
        5. Garanta que todo texto seja perfeitamente leg√≠vel em telas pequenas
        6. Otimize o contraste e impacto visual para alto CTR (taxa de cliques)
        7. Aplique as texturas e ilumina√ß√µes especificadas para criar profundidade visual
        
        OTIMIZA√á√ïES PARA PLATAFORMAS DIGITAIS:
        - Garanta alta legibilidade em scroll r√°pido de feed social
        - Crie apelo visual imediato para audi√™ncias com aten√ß√£o fragmentada
        - Torne a proposta de valor clara e impactante visualmente
        - Direcione o olhar para o bot√£o CTA de forma natural
        - Mantenha densidade de informa√ß√£o ideal para marketing digital
        - Use texturas para criar diferencia√ß√£o e memorabilidade da marca
        - Aplique ilumina√ß√£o para destacar elementos-chave de convers√£o
        
        DESCRI√á√ÉO DO CRIATIVO:
        {v.get("ideia_grafica", "Manter a estrutura compositiva original, adaptada para alto desempenho em marketing digital.")}
        
        ELEMENTOS ESPEC√çFICOS DO AN√öNCIO:
        """
        
        # Adicionar detalhes de cada elemento com instru√ß√µes espec√≠ficas para marketing digital
        if "placeholders" in spec:
            for p in spec["placeholders"]:
                # Compatibilidade com diversos tipos de elementos
                element_type = p.get("type", "elemento").lower()
                
                if element_type == "text":
                    # Obter propriedades detalhadas do texto original
                    font_props = p.get("font", {})
                    font_style = f"fam√≠lia '{font_props.get('family', 'original')}', " \
                               f"peso {font_props.get('weight', 'original')}, " \
                               f"alinhamento {font_props.get('alignment', 'original')}"
                    
                    # Obter o novo texto para este elemento ou manter o original
                    texto = v.get("textos", {}).get(p["id"], p.get("value", "Texto"))
                    
                    # Determinar fun√ß√£o de marketing baseada na hierarquia visual
                    hierarchy = p.get('visual_hierarchy', '').lower()
                    if "prim√°rio" in hierarchy or p["id"] == "1":
                        marketing_role = "HEADLINE PRINCIPAL (proposta de valor central)"
                    elif "secund√°rio" in hierarchy:
                        marketing_role = "SUBHEADLINE (benef√≠cio ou detalhamento)"
                    else:
                        marketing_role = "TEXTO DE SUPORTE (informa√ß√£o complementar)"
                    
                    # Obter efeitos de ilumina√ß√£o para este elemento, se especificados
                    light_effect = ""
                    if "iluminacao" in v and "destaques" in v["iluminacao"] and p["id"] in v["iluminacao"]["destaques"]:
                        light_effect = "\n      * Efeito de luz: destaque luminoso sutil para atrair aten√ß√£o"
                    elif "lighting" in spec and "highlight_elements" in spec["lighting"] and "targets" in spec["lighting"]["highlight_elements"] and p["id"] in spec["lighting"]["highlight_elements"]["targets"]:
                        light_effect_desc = spec["lighting"]["highlight_elements"].get("effect", "destaque luminoso")
                        light_effect = f"\n      * Efeito de luz: {light_effect_desc}"
                    
                    prompt += f"""
                    - {marketing_role} adaptado para {platform_type}:
                      * Conte√∫do: "{texto}"
                      * Formata√ß√£o: {font_style}
                      * Cor: {cores.get("texto", font_props.get("color", "#FFFFFF"))}{light_effect}
                      * IMPORTANTE: Alta legibilidade em dispositivos m√≥veis, impacto visual imediato
                    """
                
                elif element_type == "button":
                    # Obter o texto do bot√£o e sua cor
                    btn_text = v.get("textos", {}).get(p["id"], p.get("value", "Bot√£o"))
                    btn_colors = p.get("colors", {})
                    btn_bg = cores.get("destaque", btn_colors.get("bg", "#FFA500"))
                    btn_text_color = cores.get("texto", btn_colors.get("text", "#FFFFFF"))
                    
                    # Obter textura do bot√£o
                    btn_texture = ""
                    if "texturas" in v and "botoes" in v["texturas"]:
                        texture_type = v["texturas"]["botoes"].get("type", "glossy")
                        btn_texture = f"\n      * Textura: {texture_type} para maximizar apelo de clique"
                    elif "textures" in spec and "button_selected" in spec["textures"]:
                        texture_type = spec["textures"]["button_selected"].get("type", "glossy")
                        btn_texture = f"\n      * Textura: {texture_type} para destacar √°rea clic√°vel"
                    
                    # Obter efeito de luz no bot√£o
                    btn_light = ""
                    if "iluminacao" in v and "destaques" in v["iluminacao"] and p["id"] in v["iluminacao"]["destaques"]:
                        btn_light = "\n      * Efeito de luz: brilho sutil nas bordas para aumentar CTR"
                    
                    prompt += f"""
                    - BOT√ÉO CTA adaptado para {platform_type}:
                      * Texto: "{btn_text}"
                      * Cor de fundo: {btn_bg} (cor de destaque para maximizar CTR)
                      * Cor do texto: {btn_text_color}{btn_texture}{btn_light}
                      * Cantos: {p.get('corners', 'arredondados')}
                      * IMPORTANTE: Visual que incentiva o clique, com alto contraste e apelo visual
                    """
                
                elif element_type == "shape":
                    # Detalhes da forma
                    shape_type = p.get("shape_type", "forma")
                    corners = p.get("corners", "original")
                    opacity = p.get("opacity", 1.0)
                    
                    # Determinar a cor da forma com base na sua fun√ß√£o
                    description = p.get("description", "").lower()
                    if "fundo" in description or "background" in description:
                        cor = cores.get("background", p.get("value", cores["primaria"]))
                        shape_role = "FUNDO PRINCIPAL (cria identidade visual do an√∫ncio)"
                        
                        # Textura do fundo
                        bg_texture = ""
                        if "texturas" in v and "background" in v["texturas"]:
                            texture_type = v["texturas"]["background"].get("type", "gradient")
                            texture_direction = v["texturas"]["background"].get("direction", "radial")
                            bg_texture = f"\n      * Textura: {texture_type} {texture_direction}"
                        elif "textures" in spec and "background" in spec["textures"]:
                            texture_type = spec["textures"]["background"].get("type", "gradient")
                            texture_direction = spec["textures"]["background"].get("direction", "radial")
                            bg_texture = f"\n      * Textura: {texture_type} {texture_direction}"
                        
                    elif "destaque" in description or "accent" in description:
                        cor = cores.get("destaque", p.get("value", cores["destaque"]))
                        shape_role = "ELEMENTO DE DESTAQUE (direciona aten√ß√£o)"
                        bg_texture = ""
                        
                        # Textura de elemento de destaque
                        if "texturas" in v and "elementos_principais" in v["texturas"]:
                            texture_type = v["texturas"]["elementos_principais"].get("type", "flat")
                            bg_texture = f"\n      * Textura: {texture_type}"
                        elif "texture" in p:
                            texture_type = p["texture"].get("type", "flat")
                            bg_texture = f"\n      * Textura: {texture_type}"
                    else:
                        cor = cores.get("primaria", p.get("value", cores["primaria"]))
                        shape_role = "ELEMENTO ESTRUTURAL (define estrutura do layout)"
                        bg_texture = ""
                        
                        # Textura de elemento estrutural
                        if "texturas" in v and "elementos_principais" in v["texturas"]:
                            texture_type = v["texturas"]["elementos_principais"].get("type", "flat")
                            bg_texture = f"\n      * Textura: {texture_type}"
                        elif "texture" in p:
                            texture_type = p["texture"].get("type", "flat")
                            bg_texture = f"\n      * Textura: {texture_type}"
                    
                    prompt += f"""
                    - {shape_role} adaptado ao formato {platform_type}:
                      * Cor: {cor}
                      * Tipo: {shape_type}
                      * Cantos: {corners}
                      * Opacidade: {opacity}{bg_texture}
                      * IMPORTANTE: Criar impacto visual alinhado com padr√µes de plataformas sociais
                    """
                
                elif element_type in ["image", "icon", "logo"]:
                    element_name = element_type.upper()
                    
                    if element_type == "logo":
                        element_desc = "LOGO DA MARCA (identidade visual, reconhecimento)"
                    elif element_type == "icon":
                        element_desc = "√çCONE (comunica√ß√£o visual r√°pida)"
                    else:
                        element_desc = "IMAGEM (elemento visual de impacto)"
                    
                    # Verificar se h√° textura especificada para o elemento
                    img_texture = ""
                    if "style" in p and "texture" in p["style"]:
                        texture_ref = p["style"]["texture"]
                        if texture_ref.startswith("textures.") and texture_ref[9:] in spec.get("textures", {}):
                            texture_name = texture_ref[9:]
                            texture_info = spec["textures"][texture_name]
                            texture_type = texture_info.get("type", "flat")
                            img_texture = f"\n      * Textura: {texture_type}"
                    elif element_type == "image" and "texturas" in v and "elementos_principais" in v["texturas"]:
                        texture_type = v["texturas"]["elementos_principais"].get("type", "flat")
                        img_texture = f"\n      * Textura: {texture_type}"
                    
                    # Verificar se h√° efeito de luz especificado
                    img_light = ""
                    if "style" in p and "lighting" in p["style"]:
                        light_ref = p["style"]["lighting"]
                        if light_ref.startswith("lighting.") and light_ref[9:] in spec.get("lighting", {}):
                            light_name = light_ref[9:]
                            light_info = spec["lighting"][light_name]
                            light_type = light_info.get("type", "ambient")
                            light_intensity = light_info.get("intensity", "medium")
                            img_light = f"\n      * Ilumina√ß√£o: {light_type}, intensidade {light_intensity}"
                    elif "iluminacao" in v and "destaques" in v["iluminacao"] and p["id"] in v["iluminacao"]["destaques"]:
                        img_light = "\n      * Ilumina√ß√£o: destaque suave para atrair aten√ß√£o"
                    
                    prompt += f"""
                    - {element_desc} adaptado para {platform_type}:
                      * Descri√ß√£o: {p.get('description', 'elemento visual')}{img_texture}{img_light}
                      * IMPORTANTE: Visual claro e impactante mesmo em tamanhos reduzidos, otimizado para feed social
                    """
                
                else:
                    # Elemento gen√©rico desconhecido
                    prompt += f"""
                    - ELEMENTO DE MARKETING adaptado para {platform_type}:
                      * Tipo: {element_type}
                      * IMPORTANTE: Otimizar para apelo visual e contribui√ß√£o para jornada de convers√£o
                    """
        
        log(f" ‚Üí Gerando criativo {v['id']} otimizado para {platform_type}")
        
        try:
            res = client.images.generate(
                model=MODEL_IMAGE,
                prompt=prompt,
                size=size,
                quality="auto",
                n=1
            )
            
            img_b64 = res.data[0].b64_json
            fixed = ensure_size(base64.b64decode(img_b64), w, h)
            # Nome do arquivo com formato normalizado
            safe_platform = platform_type.split()[0].lower()
            out = OUT_DIR / f"{v['id']}_{safe_platform}.png"
            out.write_bytes(fixed)
            
            resultados.append({
                "id": v['id'],
                "plataforma": platform_type,
                "tamanho": size,
                "arquivo": str(out),
                "prompt": prompt
            })
        except Exception as e:
            log(f"‚ö†Ô∏è Erro ao gerar criativo {v['id']} para {platform_type}: {str(e)}")
            # Salvar o prompt problem√°tico para diagn√≥stico
            safe_platform = platform_type.split()[0].lower()
            error_file = OUT_DIR / f"error_{v['id']}_{safe_platform}_prompt.txt"
            error_file.write_text(prompt, encoding="utf-8")
            log(f"  Prompt salvo em {error_file}")
    
    return resultados

def main():
    parser = argparse.ArgumentParser(description="Gerador de criativos para marketing digital (Facebook/Instagram/Google Ads)")
    parser.add_argument("-i", "--image", required=True, help="Imagem de refer√™ncia para o criativo")
    parser.add_argument("-n", "--num", type=int, default=3, help="N√∫mero de varia√ß√µes de criativo (padr√£o: 3)")
    parser.add_argument("--size", default=DEFAULT_SIZE, 
                       choices=["1024x1024", "1024x1536", "1536x1024", "auto"],
                       help="Tamanho suportado pelo modelo de imagem")
    parser.add_argument("--style", default=DEFAULT_STYLE, 
                       choices=["photorealistic", "flat", "3d", "cartoon"],
                       help="Estilo visual dos criativos de marketing")
    parser.add_argument("--platform", default="all", 
                       choices=["all", "facebook", "instagram", "google", "story"],
                       help="Plataforma de destino para os criativos")
    parser.add_argument("--force", action="store_true", 
                       help="For√ßa o processamento mesmo com an√°lise incompleta")
    
    args = parser.parse_args()
    OUT_DIR.mkdir(exist_ok=True)
    
    if not os.getenv("OPENAI_API_KEY"):
        sys.exit("‚ùå Defina OPENAI_API_KEY no ambiente")
    
    img_path = Path(args.image)
    if not img_path.exists():
        sys.exit(f"‚ùå Arquivo n√£o encontrado: {img_path}")
    
    # Pipeline de processamento
    log(f"üîç Iniciando an√°lise da pe√ßa publicit√°ria: {img_path}")
    spec = analisar_imagem(img_path)
    
    # Verificar se temos an√°lise suficiente para prosseguir
    if "raw_analysis" in spec:
        log("‚ö†Ô∏è Usando an√°lise simplificada (modelo b√°sico)")
        if not args.force:
            log("üí° Use --force para continuar mesmo com an√°lise simplificada")
            (OUT_DIR / "analise_parcial.json").write_text(
                json.dumps(spec, ensure_ascii=False, indent=2),
                encoding="utf-8"
            )
            log(f"üîÑ An√°lise parcial salva em {OUT_DIR}/analise_parcial.json")
            sys.exit("‚ùå An√°lise incompleta. Verifique a imagem e tente novamente.")
        log("‚öôÔ∏è Continuando com modelo b√°sico (--force)")
    
    elementos_count = len(spec.get("placeholders", []))
    log(f"‚úì An√°lise conclu√≠da: identificados {elementos_count} elementos no criativo")
    
    log(f"üé® Gerando {args.num} varia√ß√µes otimizadas para marketing digital")
    var_pack = gerar_variacoes(spec, args.num)
    
    if "error" in var_pack:
        sys.exit(f"‚ùå {var_pack['error']}")
    
    variacoes = var_pack.get("variacoes", [])
    log(f"‚úì Planejamento conclu√≠do: {len(variacoes)} vers√µes de an√∫ncios definidas")
    
    # Usar um tamanho compat√≠vel com base na plataforma
    if args.platform == "facebook":
        size = "1024x1536"  # Vertical para Facebook
        log(f"‚ÑπÔ∏è Usando tamanho {size} para Facebook")
    elif args.platform == "instagram":
        size = "1024x1024"  # Quadrado para Instagram
        log(f"‚ÑπÔ∏è Usando tamanho {size} para Instagram")
    elif args.platform == "google":
        size = "1536x1024"  # Horizontal para Google
        log(f"‚ÑπÔ∏è Usando tamanho {size} para Google")
    elif args.platform == "story":
        size = "1024x1536"  # Vertical para Stories
        log(f"‚ÑπÔ∏è Usando tamanho {size} para Stories")
    else:
        size = args.size
        log(f"‚ÑπÔ∏è Usando tamanho {size} conforme especificado")
    
    log(f"üñºÔ∏è Gerando criativos com dimens√£o {size} no estilo {args.style}")
    resultados = gerar_imagens(variacoes, spec, size, args.style)
    
    # Salvar detalhes da an√°lise original para refer√™ncia
    (OUT_DIR / "analise_original.json").write_text(
        json.dumps(spec, ensure_ascii=False, indent=2),
        encoding="utf-8"
    )
    
    # Salvar o plano de varia√ß√µes para refer√™ncia
    (OUT_DIR / "plano_variacoes.json").write_text(
        json.dumps(var_pack, ensure_ascii=False, indent=2),
        encoding="utf-8"
    )
    
    # Salvar manifesto com resultados
    (OUT_DIR / "resultados.json").write_text(
        json.dumps({"resultados": resultados}, ensure_ascii=False, indent=2),
        encoding="utf-8"
    )
    
    log(f"üéâ Conclu√≠do! {len(resultados)} criativos para marketing digital gerados em {OUT_DIR}/")
    
    # Agrupar por plataforma para relat√≥rio
    por_plataforma = {}
    for r in resultados:
        plat = r.get("plataforma", "Gen√©rico")
        if plat not in por_plataforma:
            por_plataforma[plat] = []
        por_plataforma[plat].append(r)
    
    # Exibir resultados por plataforma
    for plat, items in por_plataforma.items():
        log(f"  ‚ñ∫ {plat}: {len(items)} criativos")
        for item in items:
            log(f"    - {item['id']}: {item['arquivo']}")

if __name__ == "__main__":
    main() 